@model SearchListViewModel

@{
    ViewBag.Title = "Search";
    Layout = "_BannerLayout";

    SearchRoute current = Model.CurrentRoute;
    SearchRoute routes = current.Clone();
    string active;
}

@* Pulled from _Layout.cshtml *@
<script src="~/js/location.js"></script>
<script src="~/js/toggle.js"></script>

<style>
    .list-group {
        max-height: 300px;
        overflow-y: auto;
        overflow-x: hidden;
    }
</style>

<div id="search-container" class="container mb-3">

    @{
        routes.PageNumber = 1;
    }
    <form id="form-geolocation" class="mb-3" asp-action="CreateGeolocation" asp-all-route-data="@routes.ToDictionary()" method="post" onchange="enableGeoSubmit()" oninput="enableGeoSubmit()">
        <div class="mb-3">
            <label class="form-label" asp-for="Geolocation.TimeZoneId">Time Zone</label>
            <input id="input-timezone" class="form-control" type="hidden" asp-for="Geolocation.UserTimeZoneId" value="@Model.Geolocation.TimeZoneId" />
            <select id="select-timezone" class="form-control" asp-for="Geolocation.TimeZoneId" asp-items="@(new SelectList(Model.TimeZoneItems, "Id", "Name", Model.Geolocation.TimeZoneId))"></select>
        </div>
        <div class="mb-3">
            <label class="form-label" asp-for="Geolocation.Latitude">Latitude</label>
            <input id="input-latitude" class="form-control" asp-for="Geolocation.Latitude" type="number" value="@Model.Geolocation.Latitude" />
        </div>
        <div class="mb-3">
            <label class="form-label" asp-for="Geolocation.Longitude">Longitude</label>
            <input id="input-longitude" class="form-control" asp-for="Geolocation.Longitude" type="number" value="@Model.Geolocation.Longitude" />
        </div>
        <div asp-validation-summary="All" class="text-danger"></div>
        <div class="mb-3">
            <div id="location-help" class="form-text">Your location will not be shared.</div>
        </div>
        <div class="mb-3">
            <button id="form-geo-submit" class="btn btn-primary" type="submit" disabled>Submit</button>
            <button class="btn btn-outline-secondary" type="button" onclick="getLocation()">Use my location</button>
            <button class="btn btn-secondary" type="submit" name="reset" value="true">Reset</button>
        </div>
    </form>

    <div>
        <div class="list-group mb-3">
            @{
                routes = current.Clone();

                foreach (var sortField in Sort.GetFields())
                {
                    active = current.SortField.Active(sortField);
                    routes.SetSort(sortField);
                    <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@sortField</a>
                }
            }
        </div>

        <hr />

        <div class="mb-3">
            @{
                routes = current.Clone();

                if (routes.HasFilters())
                {
                    <a class="btn btn-outline-primary" asp-action="Clear" asp-all-route-data="@routes.ToDictionary()">Clear Filters</a>
                }
            }
        </div>

        <div class="list-group mb-3">
            @{
                routes = current.Clone();
                routes.PageNumber = 1;

                active = current.Type.Active(Filter.All);
                routes.Type = Filter.All;
                <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@Filter.All</a>

                foreach (var type in Model.Types)
                {
                    active = current.Type.Active(type.Type);
                    routes.Type = type.Type;
                    <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@type.Type</a>
                }
            }
        </div>

        <div class="list-group mb-3">
            @{
                routes = current.Clone();
                routes.PageNumber = 1;

                active = current.Catalog.Active(Filter.All);
                routes.Catalog = Filter.All;
                <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@Filter.All</a>

                foreach (var catalog in Model.Catalogs)
                {
                    active = current.Catalog.Active(catalog.Name);
                    routes.Catalog = catalog.Name;
                    <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@catalog.Name</a>
                }
            }
        </div>

        <div class="list-group mb-3">
            @{
                routes = current.Clone();
                routes.PageNumber = 1;

                active = current.Constellation.Active(Filter.All);
                routes.Constellation = Filter.All;
                <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@Filter.All</a>

                foreach (var constellation in Model.Constellations)
                {
                    active = current.Constellation.Active(constellation.Name);
                    routes.Constellation = constellation.Name;
                    <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@constellation.Name</a>
                }
            }
        </div>

        <div class="list-group mb-3">
            @{
                routes = current.Clone();
                routes.PageNumber = 1;

                active = current.Season.Active(Filter.All);
                routes.Season = Filter.All;
                <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@Filter.All</a>

                foreach (var season in Model.Seasons)
                {
                    active = current.Season.Active(season.Name);
                    routes.Season = season.Name;
                    <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@season.Name</a>
                }
            }
        </div>

        <div class="list-group mb-3">
            @{
                routes = current.Clone();
                routes.PageNumber = 1;

                active = current.Trajectory.Active(Filter.All);
                routes.Trajectory = Filter.All;
                <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@Filter.All</a>

                foreach (var trajectory in Model.Trajectories)
                {
                    active = current.Trajectory.Active(trajectory);
                    routes.Trajectory = trajectory;
                    <a class="list-group-item @active" asp-action="List" asp-all-route-data="@routes.ToDictionary()">@trajectory</a>
                }
            }
        </div>

        <div class="mb-3">
            @{
                routes = current.Clone();
                routes.PageNumber = 1;

                if (current.Local.IsFilterOn())
                {
                    routes.Local = Filter.Off;
                    <a class="btn btn-secondary" asp-action="List" asp-all-route-data="@routes.ToDictionary()">Local</a>
                }
                else
                {
                    routes.Visible = Filter.Off;
                    routes.Rising = Filter.Off;
                    routes.Local = Filter.On;
                    <a class="btn btn-outline-secondary" asp-action="List" asp-all-route-data="@routes.ToDictionary()">Local</a>
                }
            }
        </div>

        <div class="mb-3">
            @{
                routes = current.Clone();
                routes.PageNumber = 1;

                if (current.Visible.IsFilterOn())
                {
                    routes.Visible = Filter.Off;
                    <a class="btn btn-secondary" asp-action="List" asp-all-route-data="@routes.ToDictionary()">Visible</a>
                }
                else
                {
                    routes.Local = Filter.Off;
                    routes.Rising = Filter.Off;
                    routes.Visible = Filter.On;
                    <a class="btn btn-outline-secondary" asp-action="List" asp-all-route-data="@routes.ToDictionary()">Visible</a>
                }
            }
        </div>

        <div class="mb-3">
            @{
                routes = current.Clone();
                routes.PageNumber = 1;

                if (current.Rising.IsFilterOn())
                {
                    routes.Rising = Filter.Off;
                    <a class="btn btn-secondary" asp-action="List" asp-all-route-data="@routes.ToDictionary()">Rising</a>
                }
                else
                {
                    routes.Local = Filter.Off;
                    routes.Visible = Filter.Off;
                    routes.Rising = Filter.On;
                    <a class="btn btn-outline-secondary" asp-action="List" asp-all-route-data="@routes.ToDictionary()">Rising</a>
                }
            }
        </div>

        <div class="mb-3">
            @{
                routes = current.Clone();
                routes.PageNumber = 1;

                if (current.HasName.IsFilterOn())
                {
                    routes.HasName = Filter.Off;
                    <a class="btn btn-secondary" asp-action="List" asp-all-route-data="@routes.ToDictionary()">Has Name</a>
                }
                else
                {
                    routes.HasName = Filter.On;
                    <a class="btn btn-outline-secondary" asp-action="List" asp-all-route-data="@routes.ToDictionary()">Has Name</a>
                }
            }
        </div>
    </div>

    <hr />

    <div>
        @{
            routes = current.Clone();

            routes.SortAscending();
            <a asp-action="List" asp-all-route-data="@routes.ToDictionary()">@OrderDirection.Ascending</a>

            routes.SortDescending();
            <a asp-action="List" asp-all-route-data="@routes.ToDictionary()">@OrderDirection.Descending</a>
        }
    </div>

    <hr />

    @* Check if Model.DsoItems is empty in this first if statement. 
    Add else block to display message such as "No objects found that match your filters", etc. *@
    <div id="start">
        @if (Model.DsoItems is not null)
        {
            @foreach (DsoModel dso in Model.DsoItems)
            {
                @if (dso is not null)
                {
                    <a asp-controller="Search" asp-action="Details" asp-route-catalog="@dso.CatalogName" asp-route-id="@dso.Id">
                        <div>
                            @if (dso.HasName)
                            {
                                <h3>@dso.CompoundId - @dso.Name</h3>
                            }
                            else
                            {
                                <h3>@dso.CompoundId</h3>
                            }
                            @if (current.IsSortByRiseTime)
                            {
                                <i>@Model.GetSortTag(new DsoObserverOptions(dso, Model.Geolocation))</i>
                            }
                            else
                            {
                                <i>@Model.GetSortTag(new DsoObserverOptions(dso))</i>
                            }
                            <p>
                                @dso.CatalogName
                                <br />
                                @dso.Description
                                <br />
                                @dso.Type
                                <br />
                                @dso.ConstellationName
                            </p>
                            @*@if (dso.HasMultipleNames)
                {
                <p>
                <strong>Other names: </strong>
                <br />
                <ul>
                @foreach (string name in dso.GetOtherNames())
                {
                <li>@name</li>
                }
                </ul>
                </p>
                }*@
                        </div>
                    </a>
                }
            }
        }
    </div>

    <hr />

    <div>
        @{
            routes = current.Clone();

            if (current.PageNumber > 1)
            {
                routes.PageNumber = current.PageNumber - 1;
                // class="btn text-white"
                <a asp-action="List" asp-all-route-data="@routes.ToDictionary()" asp-fragment="start">Previous</a>
            }

            if (current.PageNumber < Model.TotalPages)
            {
                routes.PageNumber = current.PageNumber + 1;
                // class="btn text-white"
                <a asp-action="List" asp-all-route-data="@routes.ToDictionary()" asp-fragment="start">Next</a>
            }
        }
    </div>
</div>