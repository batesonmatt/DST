To Do:

Summary view
- Need alternating colors for the rows
- Consider spacing the rows better (see smaller screen widths)
- Center the info
- Display more info for the Position (EE, Obliquity, etc... everything)

Use bootstrap switches (checkbox) where necessary. See the toggle filters for the List view, etc.
- Need a new SeoExtension method, Checked, to retrieve either "checked" or string.Empty, based on whether the given string is "on" or "off".
  Similar to SeoExtensions.Active
- Need to use CSS to style the label as disabled (see Period view)

Consider Bootstrap input groups for tracking forms:
- https://getbootstrap.com/docs/5.0/forms/input-group/
  | #    | Days     |  for every  | #    | Days
- OR, build a string while the user fills out the form.
  Every # day(s) for # total day(s).

Revise updateFixedTrackingToggle JS function
- Don't want to use hardcoded strings for the timeunit names.
- Use hidden elements in the Period view for the time units that support fixed tracking
- for the JS script, iterate the valid time units by value/id
- Consider a new hidden selectlist of TimeUnitItem, and iterate the ID properties.
    var x = document.getElementById("supported-timeunits");
    for (i = 0; i < x.options.length; i++) { }
- Consider putting the script in the period view to utilize razor functionality.

Consider a toggle option in the Period view to allow the user to track just once
- If checked, set Period and Interval both to 0, then disable the inputs for both. (Don't need to disable the labels)
- Consider the same option for Phase tracking (No Cycles, just single result)

Fixed runtime markup issues
- Remove asp-for attribute on label elements, and replace with the correct element id.
- research this.

***

Revise Utilities.GetPhaseResults to take in (ILocalObserver, algorithm, TrackPhaseModel)
    Use shortcut condition for cycles (see GetPeriodResults)

Revise TrackController.Summary HttpGet method to use a Utilities helper method.

Period
- Consider hiding the Aggregate option by default, then only show it when the user selects Months/Years and Fixed tracking.
- Colorize each result where the object is above the horizon.
  Also display some icon in a new column at the end (Open/closed eye?).
  For small screens, just align this icon to the upper right.

Tracking results
- Display something for empty results ("No results", and an empty table)
- Consider limiting results to ~20 by default, with a Show More button at the bottom.
- Display the time scale used after posting, along with the results (Important for Period tracking, which supports fixed tracking).
- Consider adding funcionality to the *Result classes that returns more information (EE, OE, Rotation, LHA, etc...)
  So that we don't need position tracking.
- Position tracking (if implemented) will most likely perform calulations with each time scale type, etc.

Feature (Phase and period)
- Reconsider the Position view (See points below).
  OR, consider the Position be a partial view, and display it via a Bootstrap OffCanvas.
- For each result, provide an option to take the user to the Position page to view more info on that particular track record.
- Reconsider the table-hover for this
- Consider right click, or click to expand, or a button on the result row somewhere.

Use floating labels for the form controls.

Consider a builder for ILocalObserver, IObserverBuilder => LocalObserverBuilder.
- Takes DsoModel, GeolocationModel, and Algorithm
- Inject into TrackController.
- Save to session state
- Provide methods to set the Target (takes DsoModel), the Location (takes GeolocationModel), and the TimeKeeper (takes Algorithm)
- Provide methods/properties for dealing with the Season, Trajectory, etc.
OR, Consider a builder for storing at least the client date time.

Might need a routebuilder class for TrackPhase and TrackPeriod (TrackPhaseRouteBuilder and TrackPeriodRouteBuilder)
1. so that switching between the Track views, it remembers the client's last settings.
2. Because the route values are prone to user error
3. When navigating Phase and Period views, we should call different action methods, LoadPhase and LoadPeriod, and also pass the TrackSummaryRoute values.
  These actions would load the previously saved routes, if any, for those views before redirecting to the appropriate action method with the routes.
  If there is no saved routes, we need to use the TrackSummaryRoute values passed in.
  The routes will be saved to session in the regular actions methods that build the viewmodels and return the views.
- We don't need a route builder for the summary view.

Consider a Bootstrap OffCanvas for the Geolocation and Details partial views.
- Consider making the Details view a Partial view, and display it in a popup inside the List view.
  Or consider the result items in the List view to be expandable controls, and expand it to show the details.
    |---------------------------------------------|
    | ID - Name                             Track |
    | ...                                         |
    |              Expand Details                 |
    |---------------------------------------------|

Revise the JS files (wwwroot\js\...)
- Consider separate files
- Move the <script> declarations to _Layout?
- Consider moving some of the scripts from _Layout into the views that need them. (See pg. 439 and 441)

Consider removing TrackPhaseRoute routes = current.Clone(); from the Phase and Period views if not used.

PageSizeItem, TimeZoneItem, TrackPhaseItem, TrackAlgorithmItem, etc.
- These types are used in select lists
- Consider replacing with IEnumerable<SelectListItem> in the viewmodels.
  Build these in the controller via helper methods in Utilities.
- OR, Consider using a single class, SelectItem.
  => string Id, string Text, int Value

AlgorithmName, Filter, PhaseName, TimeUnitName
- Consider moving out of the Query namespace, and into BusinessLogic

Consider using DI in certain action methods, instead of through the controller constructor. See pg. 568.
- Important for the Track controller, where certain dependencies are unused.
- Also see ValidationController methods.

Consider revising Utilities.GetSortTag and its helper methods.
- Consider moving methods to DsoSortTagViewComponent.

Consider using DI for ISearchUnitOfWork and ITrackUnitOfWork, or IUnitOfWork, in SearchController and TrackController, instead of MainDbContext.

Consider removing the paging endpoint, since it is never used.

"Continuous" Tracking
- After tracking over time, allow the user to click a button to continue tracking for the same period/interval, 
  but starting at the last DateTime value.
- This could cause a bug where the datetime would eventually run to min/max value, or to a point where
  the results are not trustworthy.

---------------------------------------------------------------------------

Query update
- Consider a new SQL Server Database Project to keep track of changes to the database and to store scripts
- DST.Database
- https://stackoverflow.com/questions/194652/sql-server-regular-expressions-in-t-sql
- https://learn.microsoft.com/en-us/ef/core/querying/user-defined-function-mapping

---------------------------------------------------------------------------

Plan:
- Use tabular navbar for separate views (Summary/Overview, Vector/Phase, and Period)

Add route endpoints: tracksummary, trackphase, and trackperiod
- Finalize the segments before adding these.

Add route classes.
- Finalize the segments before adding these.

List view
- Add button to the dso items that navigates to the Track controller
  (see pg 531 for form submit button and controller link, and pg 519 for example controller).

Details view
- Add all displayable information here
- Add button to navigate to the Track controller

----------------------------------------------------------------------------

Track view/Controller

NOTE - "start" segment represents the Ticks in string format.
        Validate range from (Epoch - 200 years inclusive) up to (Epoch + 200 years exclusive)
        [Jan. 1, 1800 0H ... Jan. 1, 2200 0H)
        Get these values as Ticks.
        Try parse the segment as long, or use long value type for the Start route property value.


Routes:

- name = "tracksummary"
- pattern = "{controller}/{catalog}/{id}/{algorithm}"
- default = new { action = "Summary" }
- Ex: "/track/messier/13/gmst/"

...

- name = "trackphase"
- pattern = "{controller}/{catalog}/{id}/{algorithm}/{phasetype}/{start}/cycles/{cycles}"
- default = new { action = "Phase" }
- Ex: "/track/messier/13/gmst/rise/13011995/cycles/-10/"

...

- name = "trackperiod"
- pattern = "{controller}/{catalog}/{id}/{algorithm}/period/{start}/{timescale}/{timeunit}/{period}/interval/{interval}"
- default = new { action = "Period" }
- Ex: "/track/messier/13/gmst/period/13011995/mean-solar-time/hours/-24/interval/2/"

  interval will have validation for >= 0 and <= period. So default to 0 if out of range.

...

? Create class DST.Models.Routes.TrackRoute : IRouteDictionary<TrackRoute>
...

TrackSummaryRoute
- Catalog       Default => "messier"
- Id            Default => 1

                Catalog and Id are validated by checking the IRepository<DsoModel> TrackController._data
                if _data.Get(catalog, id) is null, use default route values.

- Algorithm     Default => "gmst"

........

TrackPhaseRoute : TrackSummaryRoute
- PhaseType    Default => "rise"
- Start         Default =>  Can I use a long value type for this? Default to J2000 Epoch in ticks. Validate +-200 years.
                            OR
                            Empty string, then get current client datetime in the route builder if value is null or whitespace.
                            Make sure to validate range.
- Cycles        Default => 1
                            Validate based on DaysAdder.Min and .Max values. (Just hardcode +-100)
                            Validate based on Tick range, see Start property.

........

TrackPeriodRoute : TrackSummaryRoute
- Start         Default =>  Can I use a long value type for this? Default to J2000 Epoch in ticks. Validate +-500 years.
                            OR
                            Empty string, then get current client datetime in the route builder if value is null or whitespace.
                            Make sure to validate range.
- TimeScale     Default => "mean-solar-time"
- TimeUnit      Default => "hours"
- Period        Default => 0, Validate based on IDateTimeAdder.Min and .Max values.
- Interval      Default => 0, Validate for >= 0 and <= validated period.
- By default if timeunit, period, or interval is invalid, then track for only the validated Start datetime.



TrackViewModel
- GeolocationModel Geolocation (? - If I use a partial view, do I need to include this property for the viewmodels?)
- IEnumerable<TimeZoneItem> TimeZoneItems (? - Same question for above)
    For Geolocation and TimeZoneItems, consider a separate viewmodel, GeolocationViewModel.
    Consider a View Component (pg. 632-635)
- DsoModel Model (Necessary for displaying the object info)
- ILocalObserver ClientObserver (Necessary for displaying all other relative info)
- ... CurrentRoute (Use base class or interface track Route)


** Revise this based on the new layout design (Summary, Phase, Period)

Features
Geo
- Form to change geolocation/timezone (consider shared view or partial view)
Summary
- Display details (Compound Id, names, catalog, type, description, constellation, RA, DEC, 
  distance, magnitude, ideal viewing season)
- Display client observer info (geolocation, timezone, current datetime, algorithm type, current timekeeper, 
  current local timekeeper, LHA)
- Option to change the algorithm type.
- Display current tracking info (The trajectory name, local?, visible?, current rise/apex/set cycle - datetime and position,
  current altaz track position)
? Refresh button to refresh the datetime, timekeeper, local timekeeper, LHA, and current tracking info.
* Consider storing client datetime to session state, and check whenever the Summary view is loaded.
  If it's been >= 5 minutes, save new datetime to session state and refresh calculated values.
  Make a label saying when the last time it was refreshed, "Refreshed 2 minutes ago."
Track selector (Rise, Set, Apex, Period):
- Track vectors in full cycles in the underlying timescale (user does not choose timescale; it must use full days for the algorithm type)
- Track "Rise" vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track "Apex" vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track "Set" vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track horizontal "Period" over time/specified datetime
  Select the starting datetime, time scale, time unit, period, interval, add from start?, then click "Track" to see the results
- Results List section for the rise, apex, set, and period track results.
  For each list item, display: Local DateTime, position, is visible (Above horizon), is rising/setting
- Need to disable/hide certain controls and information if the trajectory is never rise or circumpolar.

----------------------------------------------------------------------------

https://icons.getbootstrap.com/

----------------------------------------------------------------------------

Redesign List view
- Pagination
  https://getbootstrap.com/docs/5.0/components/pagination/
- Consider expanding/collapsable controls for the filter/sort lists
  https://getbootstrap.com/docs/5.0/components/accordion/
  https://getbootstrap.com/docs/5.0/components/collapse/
- Consider using Bootstrap Cards for the list items
  https://getbootstrap.com/docs/5.0/components/card/#grid-cards
  https://getbootstrap.com/docs/5.0/components/list-group/#custom-content
- For the navbar, redesign styles for navbar-toggler and navbar-dark. (?)
- Consider tooltips and popovers for informational stuff
  https://getbootstrap.com/docs/5.0/components/tooltips/
  https://getbootstrap.com/docs/5.0/components/popovers/

Redesign Details view

Redesign Track views

Redesign Shared views

Redesign Home and About views

----------------------------------------------------------------------------

For the home page, consider selecting a random object and display its info
Or perhaps a random object, and a random track or vector calculation, etc.
- Use a bootstrap carousel
  https://getbootstrap.com/docs/5.0/components/carousel/

Incorporate aria, title, and name (etc.) attributes in the markups

Add admin pages so that I may keep the Dso items up to date (?)

Graphing support (?)
- Graph the trajectory of a tracked object as a sinosoidal wave (position over time)

----------------------------------------------------------------------------

Create powershell script(s) to remove/update the database, rebuild the migrations, etc.
- Run from PMC in visual studio
- Keep commented out when not running, then uncomment when ready.

----------------------------------------------------------------------------

Project -> Propeties -> Code Analysis

    Change level to "Latest All" and fix warnings.

----------------------------------------------------------------------------

Localization
- Add resource strings for the views' harcoded text.
- Once all static strings and display text have definitions in DST.Resources, 
  we need to set up the localizer service/support.
- Important:
    For display strings that are also used in route segments, be sure to send the default language value
    to the route from the view.
    Example: See the Sort.cs string properties. These are displayed, but also sent to the route dictionary.
    I can set up a test resource file with definitions for these in another language, and confirm
    that only the values from the default resource (english) are sent to the route.
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/make-content-localizable?view=aspnetcore-7.0

----------------------------------------------------------------------------

Exception handling and reporting

Enable error reporting via GoDaddy email
- Add code to Services namespace
- Consider moving Services namespace up one level (out of Models)

https://stackoverflow.com/questions/40614184/handling-exception-in-asp-net-core
https://stackoverflow.com/questions/56772155/asp-net-core-how-to-handle-error-pages-in-area
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-2.2#exception-handler-lambda
https://blog.kloud.com.au/2016/03/23/aspnet-core-tips-and-tricks-global-exception-handling/