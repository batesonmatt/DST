To Do:
___________________________________________________________________________
```````````````````````````````````````````````````````````````````````````

Icons
- https://icons.getbootstrap.com/

---------------------------------------------------------------------------

Phase and Period views                                                                              ...IN PROGRESS
- Revise warning message verbiage
- Revise results layout


Details OffCanvas
- Use a Modal instead of the OffCanvas
- Use a single Modal
- Implement support for varying data in the modal to avoid creating a modal per object in the loop.

Tooltips (Do not use the Tooltip nor Popover components, which rely on the Popper library)
- Consider hover over hint icon (?) at the end of the text.
- Consider Collapse control for tooltips
- Use .form-text for tooltips
  Consider pt-1 and mt-0 on the form-text
  OR, consider pb-1 and mb-0 on the control.

Revise all id tags as camelCase

Use text-truncate class everywhere.
Use user-select-none class everywhere.
- Hint: Ctrl+Shift+F

Consider using .stretched-link to the search results card details link 
- need to revise the layout so the Track button is still clickable.

Consider class="display-#" for certain headings (like the banners)

Users might disable JavaScript.
- Consider a message stating JavaScript must be enabled on this browser to run scripts.

---------------------------------------------------------------------------

REDESIGN VIEWS

Get images
- Use Wikimedia Commons
- Add new linking table, DsoImages
  Add DsoImageID field to DsoItems
  Contains fields for ImageID, file path in hosting directory (include in solution ?), thumbnail path (?), credits

List

Details

Summary

Phase

Period

Shared
- Move any duplicate markup into layout views.
  Anything that doesn't need to be a partial view (doesn't require arguments).
  See "Back to search" markup in the Track views.

Home
- Include short summary
Consider selecting 3 random objects and display its info, image, etc.
- Consider a random object, random track or vector calculation, random location and time, etc.
- Consider option to allow the user to set their own geolocation
- Use a bootstrap carousel
  https://getbootstrap.com/docs/5.0/components/carousel/

About

Navbar
- Consider redesigning styles for navbar-toggler and navbar-dark.
  _HeaderFooterLayout

Footer

Consider Bootstrap input groups for tracking forms:
- https://getbootstrap.com/docs/5.0/forms/input-group/
  | #    | Days     |  for every  | #    | Days

Text Interactions (Text selection)
- https://getbootstrap.com/docs/5.0/utilities/interactions/

Use Bootstrap class .text-truncate where necessary (adds an ellipsis at the end of text)

---------------------------------------------------------------------------

Update .NET SDK

---------------------------------------------------------------------------

Exception handling and reporting

Enable error reporting via GoDaddy email
- Add code to Services namespace
- Consider moving Services namespace up one level (out of Models)

https://stackoverflow.com/questions/40614184/handling-exception-in-asp-net-core
https://stackoverflow.com/questions/56772155/asp-net-core-how-to-handle-error-pages-in-area
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-2.2#exception-handler-lambda
https://blog.kloud.com.au/2016/03/23/aspnet-core-tips-and-tricks-global-exception-handling/

---------------------------------------------------------------------------

Localization
- Add resource strings for the views' harcoded text.
- Once all static strings and display text have definitions in DST.Resources, 
  we need to set up the localizer service/support.
- Important:
    For display strings that are also used in route segments, be sure to send the default language value
    to the route from the view.
    Example: See the Sort.cs string properties. These are displayed, but also sent to the route dictionary.
    I can set up a test resource file with definitions for these in another language, and confirm
    that only the values from the default resource (english) are sent to the route.
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/make-content-localizable?view=aspnetcore-7.0

---------------------------------------------------------------------------

[Misc]

Create powershell script(s) to remove/update the database, rebuild the migrations, etc.
- Run from PMC in visual studio
- Keep commented out when not running, then uncomment when ready.

Period
- Consider hiding the Aggregate option by default, then only show it when the user
  selects Months/Years and Fixed tracking.

Consider a builder for ILocalObserver, IObserverBuilder => LocalObserverBuilder.
- Takes DsoModel, GeolocationModel, and Algorithm
- Inject into TrackController.
- Save to session state
- Provide methods to set the Target (takes DsoModel), the Location (takes GeolocationModel), and the TimeKeeper (takes Algorithm)
- Provide methods/properties for dealing with the Season, Trajectory, etc.
OR, Consider a builder for storing at least the client date time.

Might need a routebuilder class for TrackPhase and TrackPeriod (TrackPhaseRouteBuilder and TrackPeriodRouteBuilder)
1. so that switching between the Track views, it remembers the client's last settings.
2. Because the route values are prone to user error
3. When navigating Phase and Period views, we should call different action methods, LoadPhase and LoadPeriod, 
    and also pass the TrackSummaryRoute values.
  These actions would load the previously saved routes, if any, for those views before redirecting to the appropriate action method with the routes.
  If there is no saved routes, we need to use the TrackSummaryRoute values passed in.
  The routes will be saved to session in the regular actions methods that build the viewmodels and return the views.
- We don't need a route builder for the summary view.
- Would need to add any properties not already included in the routes.

Query & Database update
- Revise all queries (SearchQueryOptions, QueryOptions, Repository) to avoid Linq to Objects
    so that they may be converted to valid SQL.
  See initial call to ToList in Repository.BuildQuery.
  We need to avoid this call because it adds unnecessary overhead by selecting all the data 
  first, then again in Repository.List.
- Revise sort-filter form/model so that the posted values are the actual data values/ids (do not use ToKebabCase).
  Might need to revise TextValuePair to not call ToKebabCase.
  The TextValuePair.Value property should be the model's key value. (Consider updating the database with INT primary keys)
- Use ISortFilterBuilder dependency to access the values.
- Consider a new SQL Server Database Project to keep track of changes to the database 
    and to store scripts
    (DST.Database)
- https://stackoverflow.com/questions/194652/sql-server-regular-expressions-in-t-sql
- https://learn.microsoft.com/en-us/ef/core/querying/user-defined-function-mapping#mapping-a-method-to-a-custom-sql

Admin
Consider admin pages so that I may conveniently keep the Dso items up to date (?)
- Could also be used to update other site info, like home page announcements.