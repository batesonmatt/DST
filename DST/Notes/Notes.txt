To Do:

*******************************************************************************************************

Implement fixed tracking support (For Period tracking):

Fixed tracking is already built in for Phase tracking, so it won't be an option in the Phase form.

By default, fixed tracking is disabled for Period tracking, and the tracker should use the Mean Solar Time timescale.

If the user enables fixed tracking in the period tracking form, then the timescale option should 
either be hidden or disabled and set to the appropriate timescale in the front-end.

When using the GMST/GAST timekeeping algorithms, fixed tracking will use the Sidereal timescale.
When using the ERA timekeeping algorithm, fixed tracking will use the Stellar timescale.

Fixed tracking will only be available as an option for timeunits of Days, Weeks, Months, and Years.
If the user selects a timeunit of Seconds, Minutes, or Hours, then the tracker MUST use the Mean Solar timescale.
See below for further explanation.

----------------------------------------------------------------------------------------------

Using IDateTimeAdder and/or ITimeScalable

When adding in seconds, minutes, and hours in sidereal time and stellar time, 
the datetimes are all the same.

This is actually due to the ITimeScalable implementations converting the ticks
to total days, then truncating the fractional part.
	
Since each interval being added is less than a whole day, the value will almost always be 0.

Test a 24 hour period for 1 hour intervals, where each interval is based on the 
starting datetime. Only the last interval will be different, since it is 24 hours
from the start, which is 1 whole day.
Likewise, testing a 168 hour period for 12 hour intervals, every two datetimes are the same.

Solution - To avoid user confusion, only allow tracking in Sidereal/Stellar time if
			tracking in days, weeks, months, and years.
			This will be accomplished in the front-end.

			The user may, however, still choose the Earth-rotational algorithm, 
			but can only track in mean solar time if using seconds, minutes, and hours.

*******************************************************************************************************

Consider a new Unit Test that tests a INonTrackableCoordinate/INonTrackableVector

Consider class-level validation (IValidatableObject) for TrackPhaseModel and TrackPeriodModel.
- Need to validate Cycles does not go beyond the min/max (Or just display the number results that were tracked before running out of bounds)
- Need to validate Period does not go beyond the min/max (Or just display the number results that were tracked before running out of bounds)
- Need to validate Period != 0, Interval > 0, and Interval < Abs(Period)
  Or, just have regular range attributes for client-side validation, and attempt to track on post.
  If Interval > Abs(Period), just track the Starting datetime.

Period route/validation:
- {controller}/{action}/{catalog}/{id}/{algorithm}/{start}/fixed-tracking-{fixed}/{timeunit}/{period}/interval/{interval}
    Where Fixed = "On"/"Off"
    If TimeUnit = Seconds, Minutes, or Hours, disable the Fixed option (Set to "Off")
    If Algorithm = GMST or GAST, and Fixed = On, use TimeScale.SiderealTime
    If Algorithm = ERA, and Fixed = On, use TimeScale.StellarTime
    Otherwise, use TimeScale.MeanSolarTime
    Display the time scaled used after posting, along with the results. (Consider doing this for the Phase results, too.)

Consider tracking the object's location at a single point in time.
- TrackLocationRoute, TrackLocationModel, TrackLocationViewModel, Location view

Use floating labels for the form controls.

The Algorithm select control should be available in the Phase/Period forms.
- The builders/routes will use this value that gets posted from the form, instead of the one already selected in the current route.
- The current selection in the select list will be initially set to the Algorithm value in the current route.
  This could affect the other controls in the Period form.
  A similar thing will happen for the Phase form if the Dso (Catalog, Id) in the route is NeverRise or Circumpolar.
  Use razor code to disable/hide certain options and display messages based on the route values.
  There will also be server-side validation to ensure bad data doesn't get sent in.
- The Summary view may still have an Algorithm select control.

Consider a builder for ILocalObserver, IObserverBuilder => LocalObserverBuilder.
- Takes DsoModel, GeolocationModel, and Algorithm
- Inject into TrackController.
- Save to session state
- Provide methods to set the Target (takes DsoModel), the Location (takes GeolocationModel), and the TimeKeeper (takes Algorithm)
- Provide methods/properties for dealing with the Season, Trajectory, etc.

OR, Consider a builder for storing at least the client date time.

Consider a TrackPhaseModel and TrackPeriodModel with custom server-side validation attributes for the properties.
- See pg. 418
- To use DI in validation attribute classes: 

    IPhaseBuilder b = (IPhaseBuilder)validationContext.GetService(typeof(IPhaseBuilder));
  
    OR:

    using Microsoft.Extensions.DependencyInjection;
    ...
    IPhaseBuilder b = validationContext.GetService<IPhaseBuilder>()


Might need a routebuilder class for TrackPhase and TrackPeriod (TrackPhaseRouteBuilder and TrackPeriodRouteBuilder)
1. so that switching between the Track views, it remembers the client's last settings.
2. Because the route values are prone to user error
3. When navigating Phase and Period views, we should call different action methods, LoadPhase and LoadPeriod, and also pass the TrackSummaryRoute values.
  These actions would load the previously saved routes, if any, for those views before redirecting to the appropriate action method with the routes.
  If there is no saved routes, we need to use the TrackSummaryRoute values passed in.
  The routes will be saved to session in the regular actions methods that build the viewmodels and return the views.
- We don't need a route builder for the summary view.

Validation
- The Start segment will be treated in the client's local time
- The Start segment must be validated within +-1000 years of the J2000 Epoch
- The initial validation in the route classes (TrackPhaseRoute.Validate() and TrackPeriodRoute.Validate())
  will only perform basic validation, but are not responsible for determining timezone checks for local/UTC conversions.
  See SearchController.List() for an example of how the SearchRoute values are initially validated, modified,
  then saved back into session state in the SearchRouteBuilder object.

When visiting the Phase and Period views for the first time (i.e., from the Summary view), use the tracksummary route values.
Then when posting from those views, use their respective route values (TrackPhaseRoute and TrackPeriodRoute).

When navigating back to the Summary view from the Phase and Period views, use the TrackSummaryRoute values.

Might need separate view models for the track views
- Consider TrackPhaseViewModel : TrackSummaryViewModel that has a collection of IVector objects

Consider a Bootstrap OffCanvas for the Geolocation and Details partial views.
- Consider making the Details view a Partial view, and display it in a popup inside the List view.
  Or consider the result items in the List view to be expandable controls, and expand it to show the details.
    |---------------------------------------------|
    | ID - Name                             Track |
    | ...                                         |
    |              Expand Details                 |
    |---------------------------------------------|

Revise the JS files (wwwroot\js\...)
- Consider separate files
- Move the <script> declarations to _Layout?

Consider removing TrackPhaseRoute routes = current.Clone(); from the Phase and Period views if not used.

PageSizeItem, TimeZoneItem, TrackPhaseItem, TrackAlgorithmItem, etc.
- These types are used in select lists
- Consider using a single class, SelectItem.
  => string Id, string Text, int Value

Consider moving AlgorithmName and PhaseName out of the Query namespace, and into BusinessLogic?

Consider renaming Utilities.GetSearchListPageSizeItems() to .GetPageSizeItems()

Consider using DI in certain action methods, instead of through the controller constructor. See pg. 568.

Consider revising Utilities.GetSortTag and its helper methods.
- Consider moving methods to DsoSortTagViewComponent.

For the IVector list sections in Phase and Period views, consider limiting results to ~50 by default, with a Show More button at the bottom.

---------------------------------------------------------------------------

Plan:
- Use tabular navbar for separate views (Summary/Overview, Vector/Phase, and Period)

Add route endpoints: tracksummary, trackphase, and trackperiod
- Finalize the segments before adding these.

Add route classes.
- Finalize the segments before adding these.

List view
- Add button to the dso items that navigates to the Track controller
  (see pg 531 for form submit button and controller link, and pg 519 for example controller).

Details view
- Add all displayable information here
- Add button to navigate to the Track controller

----------------------------------------------------------------------------

Track view/Controller

NOTE - "start" segment represents the Ticks in string format.
        Validate range from (Epoch - 200 years inclusive) up to (Epoch + 200 years exclusive)
        [Jan. 1, 1800 0H ... Jan. 1, 2200 0H)
        Get these values as Ticks.
        Try parse the segment as long, or use long value type for the Start route property value.


Routes:

- name = "tracksummary"
- pattern = "{controller}/{catalog}/{id}/{algorithm}"
- default = new { action = "Summary" }
- Ex: "/track/messier/13/gmst/"

...

- name = "trackphase"
- pattern = "{controller}/{catalog}/{id}/{algorithm}/{phasetype}/{start}/cycles/{cycles}"
- default = new { action = "Phase" }
- Ex: "/track/messier/13/gmst/rise/13011995/cycles/-10/"

...

- name = "trackperiod"
- pattern = "{controller}/{catalog}/{id}/{algorithm}/period/{start}/{timescale}/{timeunit}/{period}/interval/{interval}"
- default = new { action = "Period" }
- Ex: "/track/messier/13/gmst/period/13011995/mean-solar-time/hours/-24/interval/2/"

  interval will have validation for >= 0 and <= period. So default to 0 if out of range.

...

? Create class DST.Models.Routes.TrackRoute : IRouteDictionary<TrackRoute>
...

TrackSummaryRoute
- Catalog       Default => "messier"
- Id            Default => 1

                Catalog and Id are validated by checking the IRepository<DsoModel> TrackController._data
                if _data.Get(catalog, id) is null, use default route values.

- Algorithm     Default => "gmst"

........

TrackPhaseRoute : TrackSummaryRoute
- PhaseType    Default => "rise"
- Start         Default =>  Can I use a long value type for this? Default to J2000 Epoch in ticks. Validate +-200 years.
                            OR
                            Empty string, then get current client datetime in the route builder if value is null or whitespace.
                            Make sure to validate range.
- Cycles        Default => 1
                            Validate based on DaysAdder.Min and .Max values. (Just hardcode +-100)
                            Validate based on Tick range, see Start property.

........

TrackPeriodRoute : TrackSummaryRoute
- Start         Default =>  Can I use a long value type for this? Default to J2000 Epoch in ticks. Validate +-500 years.
                            OR
                            Empty string, then get current client datetime in the route builder if value is null or whitespace.
                            Make sure to validate range.
- TimeScale     Default => "mean-solar-time"
- TimeUnit      Default => "hours"
- Period        Default => 0, Validate based on IDateTimeAdder.Min and .Max values.
- Interval      Default => 0, Validate for >= 0 and <= validated period.
- By default if timeunit, period, or interval is invalid, then track for only the validated Start datetime.



TrackViewModel
- GeolocationModel Geolocation (? - If I use a partial view, do I need to include this property for the viewmodels?)
- IEnumerable<TimeZoneItem> TimeZoneItems (? - Same question for above)
    For Geolocation and TimeZoneItems, consider a separate viewmodel, GeolocationViewModel.
    Consider a View Component (pg. 632-635)
- DsoModel Model (Necessary for displaying the object info)
- ILocalObserver ClientObserver (Necessary for displaying all other relative info)
- ... CurrentRoute (Use base class or interface track Route)


** Revise this based on the new layout design (Summary, Phase, Period)

Features
Geo
- Form to change geolocation/timezone (consider shared view or partial view)
Summary
- Display details (Compound Id, names, catalog, type, description, constellation, RA, DEC, 
  distance, magnitude, ideal viewing season)
- Display client observer info (geolocation, timezone, current datetime, algorithm type, current timekeeper, 
  current local timekeeper, LHA)
- Option to change the algorithm type.
- Display current tracking info (The trajectory name, local?, visible?, current rise/apex/set cycle - datetime and position,
  current altaz track position)
? Refresh button to refresh the datetime, timekeeper, local timekeeper, LHA, and current tracking info.
* Consider storing client datetime to session state, and check whenever the Summary view is loaded.
  If it's been >= 5 minutes, save new datetime to session state and refresh calculated values.
  Make a label saying when the last time it was refreshed, "Refreshed 2 minutes ago."
Track selector (Rise, Set, Apex, Period):
- Track vectors in full cycles in the underlying timescale (user does not choose timescale; it must use full days for the algorithm type)
- Track "Rise" vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track "Apex" vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track "Set" vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track horizontal "Period" over time/specified datetime
  Select the starting datetime, time scale, time unit, period, interval, add from start?, then click "Track" to see the results
- Results List section for the rise, apex, set, and period track results.
  For each list item, display: Local DateTime, position, is visible (Above horizon), is rising/setting
- Need to disable/hide certain controls and information if the trajectory is never rise or circumpolar.

....................................................................

"Continuous" Tracking
- After tracking over time, allow the user to click a button to continue tracking for the same period/interval, 
  but starting at the last DateTime value.
- This could cause a bug where the datetime would eventually run to min/max value, or to a point where
  the results are not trustworthy.

----------------------------------------------------------------------------

https://icons.getbootstrap.com/

----------------------------------------------------------------------------

Consider DI ISearchUnitOfWork or IUnitOfWork in SearchController, instead of DI MainDbContext.

----------------------------------------------------------------------------

Consider removing the paging endpoint, since it is never used.

----------------------------------------------------------------------------

Redesign List view
- Pagination
  https://getbootstrap.com/docs/5.0/components/pagination/
- Consider expanding/collapsable controls for the filter/sort lists
  https://getbootstrap.com/docs/5.0/components/accordion/
  https://getbootstrap.com/docs/5.0/components/collapse/
- Consider using Bootstrap Cards for the list items
  https://getbootstrap.com/docs/5.0/components/card/#grid-cards
  https://getbootstrap.com/docs/5.0/components/list-group/#custom-content
- For the navbar, redesign styles for navbar-toggler and navbar-dark. (?)
- Consider tooltips and popovers for informational stuff
  https://getbootstrap.com/docs/5.0/components/tooltips/
  https://getbootstrap.com/docs/5.0/components/popovers/

Redesign Details view

Redesign Track views

Redesign Shared views

Redesign Home and About views

----------------------------------------------------------------------------

For the home page, consider selecting a random object and display its info
Or perhaps a random object, and a random track or vector calculation, etc.
- Use a bootstrap carousel
  https://getbootstrap.com/docs/5.0/components/carousel/

Incorporate aria, title, and name (etc.) attributes in the markups

Add admin pages so that I may keep the Dso items up to date (?)

Graphing support (?)
- Graph the trajectory of a tracked object as a sinosoidal wave (position over time)

----------------------------------------------------------------------------

Create powershell script(s) to remove/update the database, rebuild the migrations, etc.
- Run from PMC in visual studio
- Keep commented out when not running, then uncomment when ready.

----------------------------------------------------------------------------

Project -> Propeties -> Code Analysis

    Change level to "Latest All" and fix warnings.

----------------------------------------------------------------------------

Localization
- Add resource strings for the views' harcoded text.
- Once all static strings and display text have definitions in DST.Resources, 
  we need to set up the localizer service/support.
- Important:
    For display strings that are also used in route segments, be sure to send the default language value
    to the route from the view.
    Example: See the Sort.cs string properties. These are displayed, but also sent to the route dictionary.
    I can set up a test resource file with definitions for these in another language, and confirm
    that only the values from the default resource (english) are sent to the route.
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/make-content-localizable?view=aspnetcore-7.0

----------------------------------------------------------------------------

Exception handling and reporting

Enable error reporting via GoDaddy email
- Add code to Services namespace
- Consider moving Services namespace up one level (out of Models)

https://stackoverflow.com/questions/40614184/handling-exception-in-asp-net-core
https://stackoverflow.com/questions/56772155/asp-net-core-how-to-handle-error-pages-in-area
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-2.2#exception-handler-lambda
https://blog.kloud.com.au/2016/03/23/aspnet-core-tips-and-tricks-global-exception-handling/