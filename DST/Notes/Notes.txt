To Do:

- Consider setting the Include property within SearchQueryOptions
   Then add a method to QueryOptions that checks whether
   _includes already contains a property before adding it.

- Continue work on the filters and sorting

SeasonModel
- Consider other methods/properties for easier work

Consider:
- initializers for GeolocationModel.TimeZoneId and .UserTimeZoneId
- initializers for SearchListViewModel properties
- initializers for DTO properties

- Add error page
- Revise Startup env.IsDevelopment() condition to point to and test the error page.

-------------------------------------------------------------------------

- Plan for passing the Geolocation properties/model across controllers.
   ? - Use Session/persistant Cookies to store the values
   ? - Use TempData to transfer the values across controllers

   Might need to add a CookieExtensions class
   Might need to add more functionality to SessionExtensions class

- HttpGet Action method in SearchController to link to Track page.
- Takes Category, Id, and Geolocation (?) values for routing.
- Also add this to the Details page to link to Track page.

- Consider expanding/collapsable controls for the filter/sort lists

Update VS

-------------------------------------------------------------------------

- Disable geo-dependent sort/filter controls until the client either allows it, or fills in their location manually.
- Enable client-side/server-side validation for GeolocationModel and view form.
 - For any error or bad input with the geo-dependent sorting/filtering within SearchQueryOptions.SortFilter(...), just return void.
   No need to alert errors.

Implement exception handling
- All process-heavy methods, such as SearchQueryOptions.SortFilter(...)

-------------------------------------------------------------------------

Consider using Bootstrap Cards for the list items...

See:
https://getbootstrap.com/docs/5.0/components/card/#grid-cards
https://getbootstrap.com/docs/5.0/components/list-group/#custom-content

-------------------------------------------------------------------------

Consider partial view for the filters. (Lot of code)

Consider partial view for the results

Consider form for the search

Search Page (List.cshtml)
- Think about all possible items/controls that will
   be displayed in the main body.
   I can always add the filters later, or as I go.
- Remove all styles and start from scratch
- Focus only on the controls and functionality
- Get everything on this page

Fix the front-end design.
(New bootstrap version doesn't support certain things)
- For the navbar, redesign styles for navbar-toggler 
  and navbar-dark.
- refer to bootstrap version documentation

Consider changing the search page to "Browse",
and maybe a separate page/tab for searching.

Consider separate page for the results?

Consider removing _DetailsLayout.cshtml

___________________________________________________________

Ideas:

For the home page, consider using a random quote of the day pulled from the database.
- These will be quotes from scifi books.
- Consider a login page (to login as admin) to CRUD these in the Quotes table.
- The login page must not be linked on the site.

___________________________________________________________

- Provide temporary blueprint for filtering/sorting by location-dependent values
  ? Add DsoModel.GetVisibility() and DsoModel.GetRiseTime()
  Query these methods in SearchQueryOptions

- Finish DTO implementations and paging/filtering/sorting support.

- Finish designing Search controls

- Revise class="btn-custom" and control-wrapper divs
    Use the outline style, no borders for control-wrapper
    Consider using <button> and overriding btn-primary and btn-secondary
    Consider introducing btn-control or btn-form id

- Edit the Search controls BG image, and design new images for the articles

- Add validation messages to GeoLocation properties, and any others if necessary.

- Incorporate aria, title, and name (etc.) attributes in the markups
___________________________________________________________

Search View:

- Change the asp-action of the Search form to "Filter", and implement the 
    Filter() GET and POST methods in CatalogController.
	[HttpGet] Filter() should store the filering/sorting options in the ViewBag

_____________________________________________________________

<!--<form asp-action="Index" method="post">
        <div class="form-group">
            <button onclick="getLocation()">Use my location</button>

            <div>
                <label asp-for="GeoLocation.Latitude">Latitude:</label>
                <input id="input-latitude" asp-for="GeoLocation.Latitude" />
            </div>
            <div>
                <label asp-for="GeoLocation.Longitude">Longitude:</label>
                <input id="input-longitude" asp-for="GeoLocation.Longitude" />
            </div>-->
    @* Change to a label *@
    <!--<div>
        <input value="@ViewBag.LAT.ToString(), @ViewBag.LON.ToString()" readonly />
    </div>-->
    @* Enable after changes are made *@
    <!--<button type="submit">Submit</button>
        </div>
    </form>-->

_______________________________________________________________________

Enable error reporting via GoDaddy email
- Add code to Services namespace
- Consider moving Services namespace up one level (out of Models)