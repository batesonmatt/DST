To Do:

- Plan for the TimeZoneName control
- Consider updating GeolocationModel with extra properties/methods 
   for setting/getting default (Reset(), etc.).
   And determining if properties are default/UTC, etc.
- Plan for clearing/Resetting the Geolocation form in the view
- Consider better design for saving the Geolocation properties to Session
- Plan for passing the Geolocation properties/model across controllers.
   ? - Use Session/persistant Cookies to store the values
   ? - Use TempData to transfer the values across controllers

For the TimeZoneName filter
- Consider no select list, just default to UTC if the user
  does not choose to use their location.
- Use a label in the front-end that defaults to the UTC timezone,
  unless the current.TimeZoneNameFilter.IsDefault() == False

- HttpGet Action method in SearchController to link to Track page.
- Takes Category, Id, and Geolocation (?) values for routing.
- Also add this to the Details page to link to Track page.


-------------------------------------------------------------------------

For the timezone input control
- Consider making a postback action so that we can verify the coord and use TimeZoneInfo.FindSystemTimeZoneById(string id).
  The retrieved timezone name will go to a hidden input control value.
  Then on server side, set the active timezone display name item in the list control.
  ...
  OR
- Consider starting with a select control, but if the user clicks "Use my location", then 
  change to an input control with the value set to the retrieved timezone name.
- Or, just try setting the value of the select control from the javascript.

Add support for getting the client's geolocation info (lat, lon, timezone name, accuracy, etc.)
- Add button to retrieve the info from the javascript code
  This should "sendToForm()" the values to the form in the markup, or leave blank if disallowed, etc.
  For the dropdown timezone selector, just send the retrieved IANA name to the value of the box.
- Disable geo-dependent sort/filter controls until the client either allows it, or fills in their location manually.
- Consider adding the timezone name and accuracy properties to GeoLocationModel
- Enable client-side/server-side validation for GeolocationModel and view form.
 - For any error or bad input with the geo-dependent sorting/filtering within SearchQueryOptions.SortFilter(...), just return void.
   No need to alert errors.
- Consider requiring the user to fill in the geolocation form first before anything else.
  Then enable/show the other stuff on the page.
  Or maybe default to location 0,0 and UTC timezone?

Implement exception handling
- All process-heavy methods, such as SearchQueryOptions.SortFilter(...)

Filter by Season:

Consider new fields for Seasons table (StartMonth, EndMonth).
Then create methods to build and get the DateTime values.

Northern hemisphere		Southern hemisphere		Start date      StartMonth (>=)     EndMonth (<)
Winter					Summer					1 December      12                  3
Spring					Autumn					1 March         3                   6
Summer					Winter					1 June          6                   9
Autumn					Spring					1 September     9                   12

DateTime start = new(2023, 12, 1, 0, 0, 0);
DateTime end = new(2023, 3, 1, 0, 0, 0);

-----------

Consider using Bootstrap Cards for the list items...

See:
https://getbootstrap.com/docs/5.0/components/card/#grid-cards
https://getbootstrap.com/docs/5.0/components/list-group/#custom-content

----------

Make a note file explaining the current steps to build the database.

Rebuild the local database on all dev machines.

Consider partial view for the filters. (Lot of code)

Consider partial view for the results

Consider form for the search

Search Page (List.cshtml)
- Think about all possible items/controls that will
   be displayed in the main body.
   I can always add the filters later, or as I go.
- Remove all styles and start from scratch
- Focus only on the controls and functionality
- Get everything on this page

Fix the front-end design.
(New bootstrap version doesn't support certain things)
- For the navbar, redesign styles for navbar-toggler 
  and navbar-dark.
- refer to bootstrap version documentation

Consider changing the search page to "Browse",
and maybe a separate page/tab for searching.

Consider separate page for the results?

Consider removing _DetailsLayout.cshtml

___________________________________________________________

Ideas:

For the home page, consider using a random quote of the day pulled from the database.
- These will be quotes from scifi books.
- Consider a login page (to login as admin) to CRUD these in the Quotes table.
- The login page must not be linked on the site.

___________________________________________________________

- Provide temporary blueprint for filtering/sorting by location-dependent values
  Add DsoModel.GetVisibility() and DsoModel.GetRiseTime()
  Query these methods in SearchQueryOptions

- Finish back-end code and incorporate into this project

- Finish DTO implementations and paging/filtering/sorting support.

- Finish designing Search controls

- Revise class="btn-custom" and control-wrapper divs
    Use the outline style, no borders for control-wrapper
    Consider using <button> and overriding btn-primary and btn-secondary
    Consider introducing btn-control or btn-form id

- Edit the Search controls BG image, and design new images for the articles

- Add validation messages to GeoLocation properties, and any others if necessary.

- Incorporate aria, title, and name (etc.) attributes in the markups
___________________________________________________________

Search View:

- Change the asp-action of the Search form to "Filter", and implement the 
    Filter() GET and POST methods in CatalogController.
	[HttpGet] Filter() should store the filering/sorting options in the ViewBag

_____________________________________________________________

<!--<form asp-action="Index" method="post">
        <div class="form-group">
            <button onclick="getLocation()">Use my location</button>

            <div>
                <label asp-for="GeoLocation.Latitude">Latitude:</label>
                <input id="input-latitude" asp-for="GeoLocation.Latitude" />
            </div>
            <div>
                <label asp-for="GeoLocation.Longitude">Longitude:</label>
                <input id="input-longitude" asp-for="GeoLocation.Longitude" />
            </div>-->
    @* Change to a label *@
    <!--<div>
        <input value="@ViewBag.LAT.ToString(), @ViewBag.LON.ToString()" readonly />
    </div>-->
    @* Enable after changes are made *@
    <!--<button type="submit">Submit</button>
        </div>
    </form>-->

_______________________________________________________________________

Enable error reporting via GoDaddy email