To Do:

- Continue work on the filters and sorting

Routing
- Change the order of the route segments so that the toggle filters appear after the list filters.
- Move hasname segment last => (local/visible/rising/hasname)
- Need to modify Startup, SearchDTO, SearchRouteBuilder, RouteDictionary, SearchQueryOptions.

Filter by Rise Time (Rising)
- Consider renaming the filter identifier to RisingFilter
   Modify Startup, SearchDTO, SearchRouteBuilder, RouteDictionary, and SearchQueryOptions
- Gets objects that are Local, RiseSetTrajectory, and IsRising() == true
   Consider  IsAboveHorizon() == false
- Mutually exclusive to Visibility and Local filters.

Sort by Rise Time
- Gets objects that are Local and order by the object's next rise datetime.
   Ascending => Sooner rise time to later rise time
- Consider a IDictionary<string,string> SearchListViewModel.SortTags => Key = DsoModel.CompoundId
   populate the values with the datetime strings that the object will rise from the observer's horizon.
   Order by all:
   1. object has rise and set trajectory
   2. object is local
   3. The amount of time until it rises.
- Use this collection to write to a "Tag" informational string on each of the objects in the List view.
   I will need to do this for some of the other sorting options (Distance, Brightness, visibility score)

Sort by Visibility
- Consider removing.

Filters
- Local, Visibility, and Rising are all mutually exclusive (Toggle 1 on at a time).
- If TrajectoryFilter is NeverRise, disable Local and Visibility
- If TrajectoryFilter.IsDefault() is false, disable Rising
- If SeasonFilter.IsDefault() is false, disable Local, Visibility, and Rising filters

Consider:
- initializers for GeolocationModel.TimeZoneId and .UserTimeZoneId
- initializers for SearchListViewModel properties

Consider moding DST.Core.Resources to a new library.
- Add more resource definitions for the static strings used in the DST solution
- Most strings that are displayed are also used for SEO (in the URL). 
   Don't worry too much about that now, just add the values to the default language resx file.
- Add static methods somewhere to retrieve multiple definitions in a list, such as GetTrajectoryNames() => IEnumerable<string>

Consider adding custom Repositories in SearchUnitOfWork for the TimeZones and Trajectories.
- Need to have queries to retrieve the lists of TimeZones, Trajectories, and Sort fields.

Trajectory
- Initialize SearchListViewModel.Trajectories in the SearchController

Startup
- Add error page
- Test error page by removing an Include statement from SearchQueryOptions

- Revise Startup env.IsDevelopment() condition to point to and test the error page.

BUG?
- For Visible filter, CircumpolarOffset trajectories are not showing up
- This is due to the Season check, meaning the object is out of season for best visibility.
- Consider a bypass check for Circumpolar and CircumpolarOffset trajectories to return true
   before the season check.
   OR
   Consider a message in the List view explaining the Visibility filter resembles "best" visibility.

-------------------------------------------------------------------------

- Plan for passing the Geolocation properties/model across controllers.
   ? - Use Session/persistant Cookies to store the values
   ? - Use TempData to transfer the values across controllers

   Might need to add a CookieExtensions class
   Might need to add more functionality to SessionExtensions class

- HttpGet Action method in SearchController to link to Track page.
- Takes Category, Id, and Geolocation (?) values for routing.
- Also add this to the Details page to link to Track page.

- Consider expanding/collapsable controls for the filter/sort lists

Update VS

-------------------------------------------------------------------------

- Disable geo-dependent sort/filter controls until the client either allows it, or fills in their location manually.
- Enable client-side/server-side validation for GeolocationModel and view form.
 - For any error or bad input with the geo-dependent sorting/filtering within SearchQueryOptions.SortFilter(...), just return void.
   No need to alert errors.

Implement exception handling
- All process-heavy methods, such as SearchQueryOptions.SortFilter(...)

-------------------------------------------------------------------------

Consider using Bootstrap Cards for the list items...

See:
https://getbootstrap.com/docs/5.0/components/card/#grid-cards
https://getbootstrap.com/docs/5.0/components/list-group/#custom-content

-------------------------------------------------------------------------

Consider partial view for the filters. (Lot of code)

Consider partial view for the results

Consider form for the search

Search Page (List.cshtml)
- Think about all possible items/controls that will
   be displayed in the main body.
   I can always add the filters later, or as I go.
- Remove all styles and start from scratch
- Focus only on the controls and functionality
- Get everything on this page

Fix the front-end design.
(New bootstrap version doesn't support certain things)
- For the navbar, redesign styles for navbar-toggler 
  and navbar-dark.
- refer to bootstrap version documentation

For Mobile responsiveness
- Design sort and Filter menu like Google Images page, or Amazon

Consider changing the search page to "Browse",
and maybe a separate page/tab for searching.

Consider separate page for the results?

Consider removing _DetailsLayout.cshtml

- Add validation messages to GeoLocation properties, and any others if necessary.

- Incorporate aria, title, and name (etc.) attributes in the markups

___________________________________________________________

Ideas:

For the home page, consider using a random quote of the day pulled from the database.
- These will be quotes from scifi books.
- Consider a login page (to login as admin) to CRUD these in the Quotes table.
- The login page must not be linked on the site.

___________________________________________________________

Add admin pages so that I may keep the Dso items up to date

Enable error reporting via GoDaddy email
- Add code to Services namespace
- Consider moving Services namespace up one level (out of Models)