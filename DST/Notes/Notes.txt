To Do:

Filter by Season:

1. Get client's  geolocation
2. Need to know the client's hemisphere (North or South)
3. 

Consider new fields for Seasons table (StartMonth, EndMonth).
Then create methods to build and get the DateTime values.

Northern hemisphere		Southern hemisphere		Start date      StartMonth (>=)     EndMonth (<)
Winter					Summer					1 December      12                  3
Spring					Autumn					1 March         3                   6
Summer					Winter					1 June          6                   9
Autumn					Spring					1 September     9                   12

DateTime start = new(2023, 12, 1, 0, 0, 0);
DateTime end = new(2023, 3, 1, 0, 0, 0);



----------

Make a note file explaining the current steps to build the database.

Rebuild the local database on all dev machines.

Consider partial view for the filters. (Lot of code)

Consider partial view for the results

Consider form for the search

Search Page (List.cshtml)
- Think about all possible items/controls that will
   be displayed in the main body.
   I can always add the filters later, or as I go.
- Remove all styles and start from scratch
- Focus only on the controls and functionality
- Get everything on this page

Fix the front-end design.
(New bootstrap version doesn't support certain things)
- For the navbar, redesign styles for navbar-toggler 
  and navbar-dark.
- refer to bootstrap version documentation

Consider changing the search page to "Browse",
and maybe a separate page/tab for searching.

Consider separate page for the results?

Consider removing _DetailsLayout.cshtml

___________________________________________________________

Ideas:

For the home page, consider using a random quote of the day pulled from the database.
- These will be quotes from scifi books.
- Consider a login page (to login as admin) to CRUD these in the Quotes table.
- The login page must not be linked on the site.

-----------------------------------------------------------

BUGS:

- Sort by: Brightness
  Should be inversely proportional to the magnitude.
  Ascending - Should sort from lowest to highest, darkest to brightest, magnitude.
  Descending - Should sort from highest to lowest, brightest to darkest, magnitude.

- Coalsack Nebula (Dark Nebula, Magnitude - null)
  Treated as the lowest magnitude, thus the "brightest" object.

___________________________________________________________

- Provide temporary blueprint for filtering/sorting by location-dependent values
  Add DsoModel.GetVisibility() and DsoModel.GetRiseTime()
  Query these methods in SearchQueryOptions

- Finish back-end code and incorporate into this project

- Finish DTO implementations and paging/filtering/sorting support.

- Finish designing Search controls

- Revise class="btn-custom" and control-wrapper divs
    Use the outline style, no borders for control-wrapper
    Consider using <button> and overriding btn-primary and btn-secondary
    Consider introducing btn-control or btn-form id

- Edit the Search controls BG image, and design new images for the articles

- Add validation messages to GeoLocation properties, and any others if necessary.

- Incorporate aria, title, and name (etc.) attributes in the markups
___________________________________________________________

Search View:

- Change the asp-action of the Search form to "Filter", and implement the 
    Filter() GET and POST methods in CatalogController.
	[HttpGet] Filter() should store the filering/sorting options in the ViewBag

- Fix:
	Pressing the "Use my location" button after submitting the Search form does nothing.
	Try clearing the properties upon submitting the form ??

	Try reformatting as a radio selection and add two new input fields with the "hidden" attribute. Send the data to these hidden fields.
	
		<input type="hidden" asp-for="GeoLocation.Latitude" />
		
		or

		<input hidden asp-for="GeoLocation.Latitude" />

_____________________________________________________________

<!--<form asp-action="Index" method="post">
        <div class="form-group">
            <button onclick="getLocation()">Use my location</button>

            <div>
                <label asp-for="GeoLocation.Latitude">Latitude:</label>
                <input id="input-latitude" asp-for="GeoLocation.Latitude" />
            </div>
            <div>
                <label asp-for="GeoLocation.Longitude">Longitude:</label>
                <input id="input-longitude" asp-for="GeoLocation.Longitude" />
            </div>-->
    @* Change to a label *@
    <!--<div>
        <input value="@ViewBag.LAT.ToString(), @ViewBag.LON.ToString()" readonly />
    </div>-->
    @* Enable after changes are made *@
    <!--<button type="submit">Submit</button>
        </div>
    </form>-->

_______________________________________________________________________


