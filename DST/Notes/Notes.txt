To Do:

Plan:
- Use tabular navbar for separate views (Summary/Overview, Vector/Phase, and Period)

Add route endpoints: tracksummary, trackphase, and trackperiod
- Finalize the segments before adding these.

Add route classes.
- Finalize the segments before adding these.

List view
- Add button to the dso items that navigates to the Track controller
  (see pg 531 for form submit button and controller link, and pg 519 for example controller).

Details view
- Add all displayable information here
- Add button to navigate to the Track controller

----------------------------------------------------------------------------

Track view/Controller

**************************************************************************************

Reconsider separate action methods and views for the Track controller.

    IActionResult Index()
        => RedirectToAction("Summary")

    [HttpGet] ViewResult Summary(TrackSummaryRoute values)
        ...
        return View(viewModel)

    ViewResult

**************************************************************************************

NOTE - "start" segment represents the Ticks in string format.
        Validate range from (Epoch - 200 years inclusive) up to (Epoch + 200 years exclusive)
        [Jan. 1, 1800 0H ... Jan. 1, 2200 0H)
        Get these values as Ticks.
        Try parse the segment as long, or use long value type for the Start route property value.


Routes:

- name = "tracksummary"
- pattern = "{controller}/{catalog}/{id}/{algorithm}"
- default = new { action = "Summary" }
- Ex: "/track/messier/13/gmst/"

...

- name = "trackphase"
- pattern = "{controller}/{catalog}/{id}/{algorithm}/{phasetype}/{start}/cycles/{cycles}"
- default = new { action = "Phase" }
- Ex: "/track/messier/13/gmst/rise/13011995/cycles/-10/"

...

- name = "trackperiod"
- pattern = "{controller}/{catalog}/{id}/{algorithm}/period/{start}/{timescale}/{timeunit}/{period}/interval/{interval}"
- default = new { action = "Period" }
- Ex: "/track/messier/13/gmst/period/13011995/mean-solar-time/hours/-24/interval/2/"

  interval will have validation for >= 0 and <= period. So default to 0 if out of range.

...

? Create class DST.Models.Routes.TrackRoute : IRouteDictionary<TrackRoute>
...

TrackSummaryRoute
- Catalog       Default => "messier"
- Id            Default => 1

                Catalog and Id are validated by checking the IRepository<DsoModel> TrackController._data
                if _data.Get(catalog, id) is null, use default route values.

- Algorithm     Default => "gmst"

........

TrackPhaseRoute : TrackSummaryRoute
- PhaseType    Default => "rise"
- Start         Default =>  Can I use a long value type for this? Default to J2000 Epoch in ticks. Validate +-200 years.
                            OR
                            Empty string, then get current client datetime in the route builder if value is null or whitespace.
                            Make sure to validate range.
- Cycles        Default => 1
                            Validate based on DaysAdder.Min and .Max values. (Just hardcode +-100)
                            Validate based on Tick range, see Start property.

........

TrackPeriodRoute : TrackSummaryRoute
- Start         Default =>  Can I use a long value type for this? Default to J2000 Epoch in ticks. Validate +-500 years.
                            OR
                            Empty string, then get current client datetime in the route builder if value is null or whitespace.
                            Make sure to validate range.
- TimeScale     Default => "mean-solar-time"
- TimeUnit      Default => "hours"
- Period        Default => 0, Validate based on IDateTimeAdder.Min and .Max values.
- Interval      Default => 0, Validate for >= 0 and <= validated period.
- By default if timeunit, period, or interval is invalid, then track for only the validated Start datetime.



TrackViewModel
- GeolocationModel Geolocation (? - If I use a partial view, do I need to include this property for the viewmodels?)
- IEnumerable<TimeZoneItem> TimeZoneItems (? - Same question for above)
    For Geolocation and TimeZoneItems, consider a separate viewmodel, GeolocationViewModel.
    Consider a View Component (pg. 632-635)
- DsoModel Model (Necessary for displaying the object info)
- ILocalObserver ClientObserver (Necessary for displaying all other relative info)
- ... CurrentRoute (Use base class or interface track Route)


** Revise this based on the new layout design (Summary, Phase, Period)

Features
Geo
- Form to change geolocation/timezone (consider shared view or partial view)
Summary
- Display details (Compound Id, names, catalog, type, description, constellation, RA, DEC, 
  distance, magnitude, ideal viewing season)
  ** Consider a button to navigate to the Details view ?? Or, use shared/partial view ??
- Display client observer info (geolocation, timezone, current datetime, algorithm type, current timekeeper, 
  current local timekeeper, LHA)
- Option to change the algorithm type.
- Display current tracking info (The trajectory name, local?, visible?, current rise/apex/set cycle - datetime and position,
  current altaz track position)
- Refresh button to refresh the datetime, timekeeper, local timekeeper, LHA, and current tracking info.
Track selector (Rise, Set, Apex, Period):
- Track vectors in full cycles in the underlying timescale (user does not choose timescale; it must use full days for the algorithm type)
- Track "Rise" vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track "Apex" vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track "Set" vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track horizontal "Period" over time/specified datetime
  Select the starting datetime, time scale, time unit, period, interval, add from start?, then click "Track" to see the results
- Results List section for the rise, apex, set, and period track results.
  For each list item, display: Local DateTime, position, is visible (Above horizon), is rising/setting
- Need to disable/hide certain controls and information if the trajectory is never rise or circumpolar.

....................................................................

Using IDateTimeAdder and/or ITimeScalable

When adding in seconds, minutes, and hours in sidereal time and stellar time, 
the datetimes are all the same.

This is actually due to the ITimeScalable implementations converting the ticks
to total days, then truncating the fractional part.
	
Since each interval being added is less than a whole day, the value will almost always be 0.

Test a 24 hour period for 1 hour intervals, where each interval is based on the 
starting datetime. Only the last interval will be different, since it is 24 hours
from the start, which is 1 whole day.
Likewise, testing a 168 hour period for 12 hour intervals, every two datetimes are the same.

Solution - To avoid user confusion, only allow tracking in Sidereal/Stellar time if
			tracking in days, weeks, months, and years.
			This will be accomplished in the front-end.

			The user may, however, still choose the Earth-rotational algorithm, 
			but can only track in mean solar time if using seconds, minutes, and hours.

....................................................................

"Continuous" Tracking
- After tracking over time, allow the user to click a button to continue tracking for the same period/interval, 
  but starting at the last DateTime value.
- This could cause a bug where the datetime would eventually run to min/max value, or to a point where
  the results are not trustworthy.

----------------------------------------------------------------------------

https://icons.getbootstrap.com/

----------------------------------------------------------------------------

Revise the JS files (wwwroot\js\...)
- Consider separate files

----------------------------------------------------------------------------

Consider DI ISearchUnitOfWork or IUnitOfWork in SearchController, instead of DI MainDbContext.

----------------------------------------------------------------------------

Consider removing the paging endpoint, since it is never used.

----------------------------------------------------------------------------

----------------------------------------------------------------------------

Redesign List view
- Pagination
  https://getbootstrap.com/docs/5.0/components/pagination/
- Consider expanding/collapsable controls for the filter/sort lists
  https://getbootstrap.com/docs/5.0/components/accordion/
  https://getbootstrap.com/docs/5.0/components/collapse/
- Consider using Bootstrap Cards for the list items
  https://getbootstrap.com/docs/5.0/components/card/#grid-cards
  https://getbootstrap.com/docs/5.0/components/list-group/#custom-content
- For the navbar, redesign styles for navbar-toggler and navbar-dark. (?)
- Consider tooltips and popovers for informational stuff
  https://getbootstrap.com/docs/5.0/components/tooltips/
  https://getbootstrap.com/docs/5.0/components/popovers/

Redesign Details view

Redesign Track views

Redesign Shared views

Redesign Home and About views

----------------------------------------------------------------------------

Disable geo-dependent sort/filter controls until the client either allows it,
or fills in their location manually. (?)

Enable client-side/server-side validation for GeolocationModel and view form.

----------------------------------------------------------------------------

For the home page, consider selecting a random object and display its info
Or perhaps a random object, and a random track or vector calculation, etc.
- Use a bootstrap carousel
  https://getbootstrap.com/docs/5.0/components/carousel/

Incorporate aria, title, and name (etc.) attributes in the markups

Add admin pages so that I may keep the Dso items up to date (?)

Graphing support (?)
- Graph the trajectory of a tracked object as a sinosoidal wave (position over time)

----------------------------------------------------------------------------

Create powershell script(s) to remove/update the database, rebuild the migrations, etc.
- Run from PMC in visual studio
- Keep commented out when not running, then uncomment when ready.

----------------------------------------------------------------------------

Project -> Propeties -> Code Analysis

    Change level to "Latest All" and fix warnings.

----------------------------------------------------------------------------

Localization
- Add resource strings for the views' harcoded text.
- Once all static strings and display text have definitions in DST.Resources, 
  we need to set up the localizer service/support.
- Important:
    For display strings that are also used in route segments, be sure to send the default language value
    to the route from the view.
    Example: See the Sort.cs string properties. These are displayed, but also sent to the route dictionary.
    I can set up a test resource file with definitions for these in another language, and confirm
    that only the values from the default resource (english) are sent to the route.
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/make-content-localizable?view=aspnetcore-7.0

----------------------------------------------------------------------------

Exception handling and reporting

Enable error reporting via GoDaddy email
- Add code to Services namespace
- Consider moving Services namespace up one level (out of Models)

https://stackoverflow.com/questions/40614184/handling-exception-in-asp-net-core
https://stackoverflow.com/questions/56772155/asp-net-core-how-to-handle-error-pages-in-area
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-2.2#exception-handler-lambda
https://blog.kloud.com.au/2016/03/23/aspnet-core-tips-and-tricks-global-exception-handling/