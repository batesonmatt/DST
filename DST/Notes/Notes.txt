To Do:

SeasonModel
- Consider a [NotMapped] property Name, which just points to the North value.
   This would make it less confusing in the markup.
- Consider other methods/properties for easier work


Season Filter
- Front-end list contains Spring, Summer, Autumn, Winter (use the North column values)
- If client latitude = 0, treat as both North and South.
  For example, if my latitude = 0, and I choose Spring, then query all DsoModels
  whose Constellation has a SeasonId = 1 and SeasonId = 3.

? Maybe just ignore this below. Consider a simple label in the front-end that states the 
4 seasons are not cultural, and they only represent divisions of the year.

- If client Latitude is between -10 and 10 degrees, just disable/ignore the seasons filter.
   This is equatorial climate. They experience only wet and dry seasons.
- If client Latitude is within 10 degree of either geographic pole, 
   ignore Spring and autumn.
   The poles only have winter and summer.
   This is arctic climate.
- If the client's geolocation is either equatorial or arctic, 
   display a label under the seasons filter to notify them
   that this climate does not experience all seasons.

- Choose season
- Filter DsoModels whose Constellation has a SeasonId matching to the chosen season.


? Update Seasons table for easier filtering:

Consider new fields for Seasons table (StartMonth, EndMonth).
Then create methods to build and get the DateTime values.

Northern hemisphere		Southern hemisphere		Start date      StartMonth (>=)     EndMonth (<)
Winter					Summer					1 December      12                  3
Spring					Autumn					1 March         3                   6
Summer					Winter					1 June          6                   9
Autumn					Spring					1 September     9                   12

DateTime start = new(2023, 12, 1, 0, 0, 0);
DateTime end = new(2023, 3, 1, 0, 0, 0);

- Make a note file explaining the current steps to build the database.
- Rebuild the local database on all dev machines.

-------------------------------------------------------------------------

- Resume work on the filters.

- Plan for passing the Geolocation properties/model across controllers.
   ? - Use Session/persistant Cookies to store the values
   ? - Use TempData to transfer the values across controllers

- HttpGet Action method in SearchController to link to Track page.
- Takes Category, Id, and Geolocation (?) values for routing.
- Also add this to the Details page to link to Track page.

- Consider expanding/collapsable controls for the filter/sort lists

Update VS

-------------------------------------------------------------------------

- Disable geo-dependent sort/filter controls until the client either allows it, or fills in their location manually.
- Enable client-side/server-side validation for GeolocationModel and view form.
 - For any error or bad input with the geo-dependent sorting/filtering within SearchQueryOptions.SortFilter(...), just return void.
   No need to alert errors.
- Consider requiring the user to fill in the geolocation form first before anything else.
  Then enable/show the other stuff on the page.
  Or maybe default to location 0,0 and UTC timezone?

Implement exception handling
- All process-heavy methods, such as SearchQueryOptions.SortFilter(...)

-------------------------------------------------------------------------

Consider using Bootstrap Cards for the list items...

See:
https://getbootstrap.com/docs/5.0/components/card/#grid-cards
https://getbootstrap.com/docs/5.0/components/list-group/#custom-content

-------------------------------------------------------------------------

Consider partial view for the filters. (Lot of code)

Consider partial view for the results

Consider form for the search

Search Page (List.cshtml)
- Think about all possible items/controls that will
   be displayed in the main body.
   I can always add the filters later, or as I go.
- Remove all styles and start from scratch
- Focus only on the controls and functionality
- Get everything on this page

Fix the front-end design.
(New bootstrap version doesn't support certain things)
- For the navbar, redesign styles for navbar-toggler 
  and navbar-dark.
- refer to bootstrap version documentation

Consider changing the search page to "Browse",
and maybe a separate page/tab for searching.

Consider separate page for the results?

Consider removing _DetailsLayout.cshtml

___________________________________________________________

Ideas:

For the home page, consider using a random quote of the day pulled from the database.
- These will be quotes from scifi books.
- Consider a login page (to login as admin) to CRUD these in the Quotes table.
- The login page must not be linked on the site.

___________________________________________________________

- Provide temporary blueprint for filtering/sorting by location-dependent values
  Add DsoModel.GetVisibility() and DsoModel.GetRiseTime()
  Query these methods in SearchQueryOptions

- Finish back-end code and incorporate into this project

- Finish DTO implementations and paging/filtering/sorting support.

- Finish designing Search controls

- Revise class="btn-custom" and control-wrapper divs
    Use the outline style, no borders for control-wrapper
    Consider using <button> and overriding btn-primary and btn-secondary
    Consider introducing btn-control or btn-form id

- Edit the Search controls BG image, and design new images for the articles

- Add validation messages to GeoLocation properties, and any others if necessary.

- Incorporate aria, title, and name (etc.) attributes in the markups
___________________________________________________________

Search View:

- Change the asp-action of the Search form to "Filter", and implement the 
    Filter() GET and POST methods in CatalogController.
	[HttpGet] Filter() should store the filering/sorting options in the ViewBag

_____________________________________________________________

<!--<form asp-action="Index" method="post">
        <div class="form-group">
            <button onclick="getLocation()">Use my location</button>

            <div>
                <label asp-for="GeoLocation.Latitude">Latitude:</label>
                <input id="input-latitude" asp-for="GeoLocation.Latitude" />
            </div>
            <div>
                <label asp-for="GeoLocation.Longitude">Longitude:</label>
                <input id="input-longitude" asp-for="GeoLocation.Longitude" />
            </div>-->
    @* Change to a label *@
    <!--<div>
        <input value="@ViewBag.LAT.ToString(), @ViewBag.LON.ToString()" readonly />
    </div>-->
    @* Enable after changes are made *@
    <!--<button type="submit">Submit</button>
        </div>
    </form>-->

_______________________________________________________________________

Enable error reporting via GoDaddy email