To Do:
___________________________________________________________________________
```````````````````````````````````````````````````````````````````````````

Use DI for ISearchUnitOfWork and ITrackUnitOfWork in the controllers instead of MainDbContext.                      ...DONE

Consider using DI in certain action methods, instead of through the controller constructor.                         ...DONE
- Important for the Track controller, where certain dependencies are unused.                                        ...DONE
- Also see ValidationController methods (Only ValidateStartDate needs the IGeolocationBuilder DI).                  ...DONE
- SearchController                                                                                                  ...DONE

Consider revising Utilities.GetSortTag and its helper methods.                                                      ...DONE
- Consider moving methods to DsoSortTagViewComponent.                                                               ...DONE
- Check for ticks == long.MinValue || ticks == long.MaxValue, and use a new resource string.                        ...DONE

Consider removing the paging endpoint, since it is never used.                                                      ...DONE

Period
- Consider hiding the Aggregate option by default, then only show it when the user
  selects Months/Years and Fixed tracking.

---------------------------------------------------------------------------

Bootstrap Misc

Text Interactions
- https://getbootstrap.com/docs/5.0/utilities/interactions/

Use Bootstrap class .text-truncate where necessary (adds an ellipsis at the end of text).

Use floating labels for the form controls.

Consider class="display-#" for certain headings (like the banners)

Consider Collapse control for tooltips
- https://getbootstrap.com/docs/5.0/components/collapse/
- OR, consider tooltips and popovers for informational stuff
  https://getbootstrap.com/docs/5.0/components/tooltips/
  https://getbootstrap.com/docs/5.0/components/popovers/

Use bootstrap switches (checkbox) where necessary. See the toggle filters for the List view, etc.
- Need a new SeoExtension method, Checked, to retrieve either "checked" or string.Empty, 
  based on whether the given string is "on" or "off".
  Similar to SeoExtensions.Active
- Need to use CSS to style the label as disabled (see Period view)

Consider Bootstrap input groups for tracking forms:
- https://getbootstrap.com/docs/5.0/forms/input-group/
  | #    | Days     |  for every  | #    | Days
- OR, build a string while the user fills out the form.
  Every # day(s) for # total day(s).

Navbar
- Consider redesigning styles for navbar-toggler and navbar-dark.

Icons
- https://icons.getbootstrap.com/

---------------------------------------------------------------------------

HTML Misc

Fixed runtime markup issues (See Inspect->Issues section for all views.)
- Remove asp-for attribute on label elements, and replace with the correct element id.
- Migrate to HTTPS?

---------------------------------------------------------------------------

Project Misc

Query update
- Revise all queries (SearchQueryOptions, QueryOptions, Repository) to avoid Linq to Objects
    so that they may be converted to valid SQL.
  See initial call to ToList in Repository.BuildQuery.
  We need to avoid this call because it adds unnecessary overhead by selecting all the data first, then again in Repository.List.
- Consider a new SQL Server Database Project to keep track of changes to the database and to store scripts
- DST.Database
- https://stackoverflow.com/questions/194652/sql-server-regular-expressions-in-t-sql
- https://learn.microsoft.com/en-us/ef/core/querying/user-defined-function-mapping

Consider admin pages so that I may conveniently keep the Dso items up to date (?)
- Could also be used to update other site info, like home page announcements.

---------------------------------------------------------------------------

Redesign views

List
- Consider expanding/collapsable controls for the filter/sort lists
  https://getbootstrap.com/docs/5.0/components/accordion/
  https://getbootstrap.com/docs/5.0/components/collapse/

Details

Track

Shared

Home
Consider selecting a random object and display its info
- Or perhaps a random object, and a random track or vector calculation, etc.
- Use a bootstrap carousel
  https://getbootstrap.com/docs/5.0/components/carousel/

About

---------------------------------------------------------------------------

Create powershell script(s) to remove/update the database, rebuild the migrations, etc.
- Run from PMC in visual studio
- Keep commented out when not running, then uncomment when ready.

---------------------------------------------------------------------------

Project -> Propeties -> Code Analysis

    Change level to "Latest All" and fix warnings.

---------------------------------------------------------------------------

Localization
- Add resource strings for the views' harcoded text.
- Once all static strings and display text have definitions in DST.Resources, 
  we need to set up the localizer service/support.
- Important:
    For display strings that are also used in route segments, be sure to send the default language value
    to the route from the view.
    Example: See the Sort.cs string properties. These are displayed, but also sent to the route dictionary.
    I can set up a test resource file with definitions for these in another language, and confirm
    that only the values from the default resource (english) are sent to the route.
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/make-content-localizable?view=aspnetcore-7.0

---------------------------------------------------------------------------

Exception handling and reporting

Enable error reporting via GoDaddy email
- Add code to Services namespace
- Consider moving Services namespace up one level (out of Models)

https://stackoverflow.com/questions/40614184/handling-exception-in-asp-net-core
https://stackoverflow.com/questions/56772155/asp-net-core-how-to-handle-error-pages-in-area
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-2.2#exception-handler-lambda
https://blog.kloud.com.au/2016/03/23/aspnet-core-tips-and-tricks-global-exception-handling/

---------------------------------------------------------------------------

Consider a builder for ILocalObserver, IObserverBuilder => LocalObserverBuilder.
- Takes DsoModel, GeolocationModel, and Algorithm
- Inject into TrackController.
- Save to session state
- Provide methods to set the Target (takes DsoModel), the Location (takes GeolocationModel), and the TimeKeeper (takes Algorithm)
- Provide methods/properties for dealing with the Season, Trajectory, etc.
OR, Consider a builder for storing at least the client date time.

Might need a routebuilder class for TrackPhase and TrackPeriod (TrackPhaseRouteBuilder and TrackPeriodRouteBuilder)
1. so that switching between the Track views, it remembers the client's last settings.
2. Because the route values are prone to user error
3. When navigating Phase and Period views, we should call different action methods, LoadPhase and LoadPeriod, 
    and also pass the TrackSummaryRoute values.
  These actions would load the previously saved routes, if any, for those views before redirecting to the appropriate action method with the routes.
  If there is no saved routes, we need to use the TrackSummaryRoute values passed in.
  The routes will be saved to session in the regular actions methods that build the viewmodels and return the views.
- We don't need a route builder for the summary view.
- Would need to add any properties not already included in the routes.