To Do:
___________________________________________________________________________
```````````````````````````````````````````````````````````````````````````

Summary
- Revise TrackController.Summary HttpGet method to use a Utilities helper method.               ...DONE
- Consider Lists (Flush, with responsive col items)                                             ...DONE
- Add bottom margins to the list items                                                          ...DONE
- Add Equation of the Equinoxes (EE)                                                            ...DONE
- Add Equation of the Origins (EO)                                                              ...DONE
- Add resource strings for these.                                                               ...DONE
- Add Intermediate Right Ascension                                                              ...DONE
- Add RA with Nutation                                                                          ...DONE
- Add DEC with Nutation                                                                         ...DONE

Phase
- Consider a toggle option to allow the user to track just once.                                ...DONE
  If checked, Cycles to 0, then disable the input. (Don't need to disable the label)            ...DONE
- Add to TrackPhaseModel (Or TrackModel).                                                       ...DONE
- Add form toggle switch option "Track Once"                                                    ...DONE
- Set TrackPhaseViewModel.TrackForm.TrackOnce in TrackController.GetPhaseViewModel              ...DONE
- Consider adding as a new route segment, TrackOnce.                                            ...DONE
- Need to implement validation (If Single, set Cycles to 0).                                    ...DONE
- Consider hiding/showing the Cycles input for Single tracking.                                 ...DONE

Period
- Consider a toggle option to allow the user to track just once (See Phase).                    ...DONE
  If checked, set Period and Interval both to 0, then disable the inputs for both.              ...DONE
- Hide/Show the Period and Interval inputs, and other options, for Single tracking.             ...DONE
- Display some icon in a new column at the end (Open/closed eye?).                              ...DONE
  For small screens, just align this icon to the upper right.                                   ...DONE

Track views
- Consider a view component or partial view for the Dso name heading.                           ...DONE

List
- Consider using Bootstrap Cards for the list items                                             ...DONE
- (Track button) Navigates to the Track controller, Summary view.                               ...DONE
- (Details link) Displays the Details partial view in a Bootstrap OffCanvas (right-side)        ...DONE
  Display data-ready information in here.                                                       ...DONE
- Include Track button to navigate to the Track controller, Summary view.                       ...DONE
  Consider a fixed button at the bottom of the OffCanvas.                                       ...DONE
- Revise layout so everything fits better vertically.                                           ...DONE
- Consider <hr/> instead of list items, or set mx-0.                                            ...DONE
- Create a View Component for the OffCanvas because we need to format the string values.        ...DONE
  Create Utilities.GetDetailsInfo()                                                             ...DONE
  Consider moving ViewModels.TrackSummaryInfo to BusinessLogic.                                 ...DONE
- Remove Details and _DetailsLayout views from project.                                         ...DONE
  Comment out SearchController.Details action method.                                           ...DONE

Geolocation
- Consider a Bootstrap OffCanvas for the Geolocation partial view.
- Or, consider a Modal: https://getbootstrap.com/docs/5.0/components/modal/
- The button to open the view:
  ---------------------------
  | IANA Name          Icon |
  | LAT, LON                |
  ---------------------------
  A button
  (IANA Name) Timezone name
  (LAT, LON) A GeographicCoordinate object, displayed as full component string, italicized.
  (Icon) Bootstrap crosshair, geo-alt, geo-alt-fill, geo, or geo-fill icon, aligned top-right or vertically centered.
- Or consider a Bootstrap Collapse, or Accordian.

Tracking results
- Display something for empty results ("No results", and an empty table)
- Consider limiting results to ~20 by default, with a Show More button at the bottom.
- Display the time scale used after posting, along with the results (Important for Period tracking, which supports fixed tracking).
- [OPTIONAL] Consider adding funcionality to the *Result classes that returns more information (EE, OE, Rotation, LHA, etc...)
  Might need view component instead of adding ILocalObserver and IAstronomicalDateTime to the *Result classes.
  Or just add primitive value properties to the classes (double, etc.).
  Consider a Position partial view, and display it via a Bootstrap OffCanvas, or expand the row.
  For each result, provide an option to view more info on that particular track record.
  Reconsider the table-hover for this.

Consider a builder for ILocalObserver, IObserverBuilder => LocalObserverBuilder.
- Takes DsoModel, GeolocationModel, and Algorithm
- Inject into TrackController.
- Save to session state
- Provide methods to set the Target (takes DsoModel), the Location (takes GeolocationModel), and the TimeKeeper (takes Algorithm)
- Provide methods/properties for dealing with the Season, Trajectory, etc.
OR, Consider a builder for storing at least the client date time.

Might need a routebuilder class for TrackPhase and TrackPeriod (TrackPhaseRouteBuilder and TrackPeriodRouteBuilder)
1. so that switching between the Track views, it remembers the client's last settings.
2. Because the route values are prone to user error
3. When navigating Phase and Period views, we should call different action methods, LoadPhase and LoadPeriod, 
    and also pass the TrackSummaryRoute values.
  These actions would load the previously saved routes, if any, for those views before redirecting to the appropriate action method with the routes.
  If there is no saved routes, we need to use the TrackSummaryRoute values passed in.
  The routes will be saved to session in the regular actions methods that build the viewmodels and return the views.
- We don't need a route builder for the summary view.
- Would need to add any properties not already included in the routes.

Consider removing TrackPhaseRoute routes = current.Clone(); from the Phase and Period views if not used.

PageSizeItem, TimeZoneItem, TrackPhaseItem, TrackAlgorithmItem, etc.
- These types are used in select lists
- Consider replacing with IEnumerable<SelectListItem> in the viewmodels.
  Build these in the controller via helper methods in Utilities.
- OR, Consider using a single class, SelectItem.
  => string Id, string Text, int Value
- Consider revising all SelectLists so they are defined as IEnumerable<SelectListItem> in their viewmodels.
  See TrackPhasViewModel.Phases

AlgorithmName, PhaseName, TimeUnitName
- Consider moving out of the Query namespace, and into BusinessLogic

Consider using DI in certain action methods, instead of through the controller constructor. See pg. 568.
- Important for the Track controller, where certain dependencies are unused.
- Also see ValidationController methods.

Consider revising Utilities.GetSortTag and its helper methods.
- Consider moving methods to DsoSortTagViewComponent.

Consider using DI for ISearchUnitOfWork and ITrackUnitOfWork, or IUnitOfWork, in SearchController and TrackController, instead of MainDbContext.

Consider removing the paging endpoint, since it is never used.

"Continuous" Tracking
- After tracking over time, allow the user to click a button to continue tracking for the same period/interval, 
  but starting at the last DateTime value.
- This could cause a bug where the datetime would eventually run to min/max value, or to a point where
  the results are not trustworthy.

Period
- Consider hiding the Aggregate option by default, then only show it when the user selects Months/Years and Fixed tracking.

---------------------------------------------------------------------------

Bootstrap Misc

Text Interactions
- https://getbootstrap.com/docs/5.0/utilities/interactions/

Use Bootstrap class .text-truncate where necessary (adds an ellipsis at the end of text).

Consider sunrise, sun, and sunsest icons for Rise, Apex, and Set options in the Phase form.

Use floating labels for the form controls.

Consider class="display-#" for certain headings (like the banners)

Consider Collapse control for tooltips
- https://getbootstrap.com/docs/5.0/components/collapse/
- OR, consider tooltips and popovers for informational stuff
  https://getbootstrap.com/docs/5.0/components/tooltips/
  https://getbootstrap.com/docs/5.0/components/popovers/

Use bootstrap switches (checkbox) where necessary. See the toggle filters for the List view, etc.
- Need a new SeoExtension method, Checked, to retrieve either "checked" or string.Empty, 
  based on whether the given string is "on" or "off".
  Similar to SeoExtensions.Active
- Need to use CSS to style the label as disabled (see Period view)

Consider Bootstrap input groups for tracking forms:
- https://getbootstrap.com/docs/5.0/forms/input-group/
  | #    | Days     |  for every  | #    | Days
- OR, build a string while the user fills out the form.
  Every # day(s) for # total day(s).

Navbar
- Consider redesigning styles for navbar-toggler and navbar-dark.

Icons
- https://icons.getbootstrap.com/

---------------------------------------------------------------------------

HTML Misc

Fixed runtime markup issues (See Inspect->Issues section for all views.)
- Remove asp-for attribute on label elements, and replace with the correct element id.
- Migrate to HTTPS?

Incorporate aria, title, and name (etc.) attributes in the markups

---------------------------------------------------------------------------

Project Misc

Query update
- Revise all queries (SearchQueryOptions, QueryOptions, Repository) to avoid Linq to Objects
    so that they may be converted to valid SQL.
  See initial call to ToList in Repository.BuildQuery.
  We need to avoid this call because it adds unnecessary overhead by selecting all the data first, then again in Repository.List.
- Consider a new SQL Server Database Project to keep track of changes to the database and to store scripts
- DST.Database
- https://stackoverflow.com/questions/194652/sql-server-regular-expressions-in-t-sql
- https://learn.microsoft.com/en-us/ef/core/querying/user-defined-function-mapping

Consider admin pages so that I may conveniently keep the Dso items up to date (?)
- Could also be used to update other site info, like home page announcements.

---------------------------------------------------------------------------

Redesign views

List
- Consider expanding/collapsable controls for the filter/sort lists
  https://getbootstrap.com/docs/5.0/components/accordion/
  https://getbootstrap.com/docs/5.0/components/collapse/

Details

Track

Shared

Home
Consider selecting a random object and display its info
- Or perhaps a random object, and a random track or vector calculation, etc.
- Use a bootstrap carousel
  https://getbootstrap.com/docs/5.0/components/carousel/

About

---------------------------------------------------------------------------

Create powershell script(s) to remove/update the database, rebuild the migrations, etc.
- Run from PMC in visual studio
- Keep commented out when not running, then uncomment when ready.

---------------------------------------------------------------------------

Project -> Propeties -> Code Analysis

    Change level to "Latest All" and fix warnings.

---------------------------------------------------------------------------

Localization
- Add resource strings for the views' harcoded text.
- Once all static strings and display text have definitions in DST.Resources, 
  we need to set up the localizer service/support.
- Important:
    For display strings that are also used in route segments, be sure to send the default language value
    to the route from the view.
    Example: See the Sort.cs string properties. These are displayed, but also sent to the route dictionary.
    I can set up a test resource file with definitions for these in another language, and confirm
    that only the values from the default resource (english) are sent to the route.
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/make-content-localizable?view=aspnetcore-7.0

---------------------------------------------------------------------------

Exception handling and reporting

Enable error reporting via GoDaddy email
- Add code to Services namespace
- Consider moving Services namespace up one level (out of Models)

https://stackoverflow.com/questions/40614184/handling-exception-in-asp-net-core
https://stackoverflow.com/questions/56772155/asp-net-core-how-to-handle-error-pages-in-area
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-2.2#exception-handler-lambda
https://blog.kloud.com.au/2016/03/23/aspnet-core-tips-and-tricks-global-exception-handling/