To Do:

DST.Core.LocalHourAngleDateTime.HourAngleCycle
- Consider renaming because it's usage doesn't necessarily refer to the LHA cycles, 
  but rather the previous/next target LHA.
  The previous/next target LHA may be on the same LHA cycle as the current LHA.

Update VS

-------------------------------------------------------------------------

BUG
- For Local, Visible, and Rising filters. And sort by Rise Time.
- The number of results (DsoItems) is dependent on the calculation.
- These options cause the calculation to be re-executed during paging,
  which could cause the result count to change between pages.
- I might not be able to do anything about this.
- Possible solution:
  These options all use a client date time.
  Try to store that value in session (Consider new property in GeolocationModel)
  Keep loading this value from session until the user chooses a different filter/sort option.

-------------------------------------------------------------------------

- Plan for passing the Geolocation properties/model across controllers.
   ? - Use Session/persistant Cookies to store the values
   ? - Use TempData to transfer the values across controllers

   Might need to add a CookieExtensions class
   Might need to add more functionality to SessionExtensions class

   ** Might need to use dependency injection for the GeolocationModel between controllers.
      Use HttpContext (IHttpContextAccessor)

      This can also be useful for allowing the different action methods of a controller access the object.

      SearchController is currently injecting the MainDbContext, which is used to load the SearchListViewModel.
      Consider extracting an interface, IGeolocation, and inject it to load the GeolocationModel.

      This would cut back on the Builder classes.

      Posting to CreateGeolocation is causing SearchController to inject a not-needed MainDbContext, 
      and loading the SearchListViewModel, which isn't used.

- HttpGet Action method in SearchController to link to Track page.
- Takes Category, Id, and Geolocation (?) values for routing.
- Also add this to the Details page to link to Track page.

- Consider expanding/collapsable controls for the filter/sort lists

-------------------------------------------------------------------------

- Disable geo-dependent sort/filter controls until the client either allows it, or fills in their location manually.
- Enable client-side/server-side validation for GeolocationModel and view form.
 - For any error or bad input with the geo-dependent sorting/filtering within SearchQueryOptions.SortFilter(...), just return void.
   No need to alert errors.

-------------------------------------------------------------------------

Consider using Bootstrap Cards for the list items...

See:
https://getbootstrap.com/docs/5.0/components/card/#grid-cards
https://getbootstrap.com/docs/5.0/components/list-group/#custom-content

-------------------------------------------------------------------------

Consider partial view for the filters. (Lot of code)

Consider partial view for the results

Consider form for the search

Search Page (List.cshtml)
- Think about all possible items/controls that will
   be displayed in the main body.
   I can always add the filters later, or as I go.
- Remove all styles and start from scratch
- Focus only on the controls and functionality
- Get everything on this page

Fix the front-end design.
(New bootstrap version doesn't support certain things)
- For the navbar, redesign styles for navbar-toggler 
  and navbar-dark.
- refer to bootstrap version documentation

For Mobile responsiveness
- Design sort and Filter menu like Google Images page, or Amazon

Consider changing the search page to "Browse",
and maybe a separate page/tab for searching.

Consider separate page for the results?

Consider removing _DetailsLayout.cshtml

- Add validation messages to GeoLocation properties, and any others if necessary.

- Incorporate aria, title, and name (etc.) attributes in the markups

___________________________________________________________

Ideas:

For the home page, consider selecting a random object and display its info
Or perhaps a random object, and a random track or vector calculation, etc.

? Add admin pages so that I may keep the Dso items up to date

___________________________________________________________

Localization
- Add resource strings for the views' harcoded text.
- Once all static strings and display text have definitions in DST.Resources, 
  we need to set up the localizer service/support.
- Important:
    For display strings that are also used in route segments, be sure to send the default language value
    to the route from the view.
    Example: See the Sort.cs string properties. These are displayed, but also sent to the route dictionary.
    I can set up a test resource file with definitions for these in another language, and confirm
    that only the values from the default resource (english) are sent to the route.
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/make-content-localizable?view=aspnetcore-7.0

----------------------------------------------------------

Exception handling and reporting

Enable error reporting via GoDaddy email
- Add code to Services namespace
- Consider moving Services namespace up one level (out of Models)

https://stackoverflow.com/questions/40614184/handling-exception-in-asp-net-core
https://stackoverflow.com/questions/56772155/asp-net-core-how-to-handle-error-pages-in-area
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-2.2#exception-handler-lambda
https://blog.kloud.com.au/2016/03/23/aspnet-core-tips-and-tricks-global-exception-handling/