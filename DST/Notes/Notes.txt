To Do:

List view
- Add results count label (Ex: "1-10 of 200 results")
- Add a search bar control (action method "Find")
  Consider a slug for the search string.
  See pg. 548, 1st ed. "SearchData"
  https://learn.microsoft.com/en-us/aspnet/mvc/overview/getting-started/introduction/adding-search
- For the DsoItems, Check if Model.DsoItems is empty in this first if statement. 
  Add else block to display message such as "No objects found that match your filters", etc.

Add Controllers.TrackController
Add Views.Track.Index
Add TrackController.Summary action method
Add tracksummary route endpoint

List view
- Add button to the dso items that navigates to the Track view
  (see pg. 531 for form submit button).

Details view
- Add all displayable information here
- Add button to navigate to the Track view

-------------------------------------------------------------------------

Track view/Controller

Linking to Track page/Controller
- HttpGet Action method in SearchController to link to Track page.
- Add link to Track page in the Details page (Add action method to SearchController).

Routes
- name = "tracksummary"
- pattern = "{controller}/{action}/{catalog}/{id}/{algorithm}"
- Ex: "/track/summary/messier/13/gmst/"
...
- name = "trackvector"
- pattern = "{controller}/{action}/{catalog}/{id}/{algorithm}/{start}/cycles-{cycles}/historical-{historical}"
- Ex: "/track/rise/messier/13/gmst/13011995/cycles-10/historical-on/"
- Ex: "/track/apex/messier/13/gmst/25122023/cycles-15/historical-off/"
- Ex: "/track/set/messier/13/gmst/14042004/cycles-2/historical-off/"
...
- name = "trackmain"
- pattern = "{controller}/{action}/{catalog}/{id}/{algorithm}/{start}/{timescale}/{timeunit}/period-{period}/interval-{interval}/historical-{historical}"
- Ex: "/track/main/messier/13/gmst/13011995/mean-solar-time/hours/period-24/interval-2/historical-on/"
- Ex: "/track/main/messier/13/gast/13011995/sidereal-time/days/period-10/interval-3/historical-off/"
- Ex: "/track/main/messier/13/era/13011995/stellar-time/weeks/period-50/interval-5/historical-off/"

? Create class DST.Models.Routes.TrackRoute : IRouteDictionary<TrackRoute>
...

TrackSummaryRoute
- Catalog       Default => "Messier"
- Id            Default => 1
- Algorithm     Default => "GMST"

TrackVectorRoute : TrackSummaryRoute
- Start         Default => Empty string, then get current client datetime in the route builder if value is null or whitespace.
- Cycles        Default => 1
- Historical    Default => "off"

TrackMainRoute : TrackSummaryRoute
- Start         Default => Empty string, then get current client datetime in the route builder if value is null or whitespace.
- TimeScale     Default => "Mean solar time"
- TimeUnit      Default => "Hours"
- Period        Default => 0
- Interval      Default => 0
- Historical    Default => "off"
- By default if timeunit, period, or interval is invalid, then track for the current client datetime.

TrackViewModel
- GeolocationModel Geolocation (? - If I use a partial view, do I need to include this property for the viewmodels?)
- IEnumerable<TimeZoneItem> TimeZoneItems (? - Same question for above)
- ILocalObserver ClientObserver
- RouteDictionary CurrentRoute

Features (Track/"Summary", or "Main", action method)
- Form to change geolocation/timezone (consider shared view or partial view)
- Display details (Compound Id, names, catalog, type, description, constellation, RA, DEC, 
  distance, magnitude, ideal viewing season)
- Display client observer info (geolocation, timezone, current datetime, algorithm type, current timekeeper, 
  current local timekeeper, LHA)
- Option to change the algorithm type.
- Display current tracking info (The trajectory name, local?, visible?, current rise/apex/set cycle - datetime and position,
  current altaz track position)
- Refresh button to refresh the datetime, timekeeper, local timekeeper, LHA, and current tracking info.
- Track Rise vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track Apex vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track Set vectors over time
  Select the starting datetime and the number of cycles, then click "Track" to see the results
- Track horizontal position over time
  Select the starting datetime, time scale, time unit, period, interval, add from start?, then click "Track" to see the results
- Consider a results section for the rise, apex, set, and track results.
  Otherwise, I will need to have separate action methods for these that redirect to their own views/routes.
- Need to disable/hide certain controls and information if the trajectory is never rise or circumpolar.

....................................................................

Using IDateTimeAdder and/or ITimeScalable

When adding in seconds, minutes, and hours in sidereal time and stellar time, 
the datetimes are all the same.

This is actually due to the ITimeScalable implementations converting the ticks
to total days, then truncating the fractional part.
	
Since each interval being added is less than a whole day, the value will almost always be 0.

Test a 24 hour period for 1 hour intervals, where each interval is based on the 
starting datetime. Only the last interval will be different, since it is 24 hours
from the start, which is 1 whole day.
Likewise, testing a 168 hour period for 12 hour intervals, every two datetimes are the same.

Solution - To avoid user confusion, only allow tracking in Sidereal/Stellar time if
			tracking in days, weeks, months, and years.
			This will be accomplished in the front-end.

			The user may, however, still choose the Earth-rotational algorithm, 
			but can only track in mean solar time if using seconds, minutes, and hours.

....................................................................

"Continuous" Tracking
- After tracking over time, allow the user to click a button to continue tracking for the same period/interval, 
  but starting at the last DateTime value.
- This could cause a bug where the datetime would eventually run to min/max value, or to a point where
  the results are not trustworthy.

-------------------------------------------------------------------------

Redesign List view
- Consider expanding/collapsable controls for the filter/sort lists
- Consider using Bootstrap Cards for the list items
    https://getbootstrap.com/docs/5.0/components/card/#grid-cards
    https://getbootstrap.com/docs/5.0/components/list-group/#custom-content
- For the navbar, redesign styles for navbar-toggler and navbar-dark. (?)

Redesign Details view

Redesign Shared views

Redesign Home and About views

-------------------------------------------------------------------------

Disable geo-dependent sort/filter controls until the client either allows it,
or fills in their location manually. (?)

Enable client-side/server-side validation for GeolocationModel and view form.

___________________________________________________________

For the home page, consider selecting a random object and display its info
Or perhaps a random object, and a random track or vector calculation, etc.

Incorporate aria, title, and name (etc.) attributes in the markups

Add admin pages so that I may keep the Dso items up to date (?)

Graphing support (?)
- Graph the trajectory of a tracked object as a sinosoidal wave (position over time)

___________________________________________________________

Project -> Propeties -> Code Analysis

    Change level to "Latest All" and fix warnings.

----------------------------------------------------------

Localization
- Add resource strings for the views' harcoded text.
- Once all static strings and display text have definitions in DST.Resources, 
  we need to set up the localizer service/support.
- Important:
    For display strings that are also used in route segments, be sure to send the default language value
    to the route from the view.
    Example: See the Sort.cs string properties. These are displayed, but also sent to the route dictionary.
    I can set up a test resource file with definitions for these in another language, and confirm
    that only the values from the default resource (english) are sent to the route.
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/
- https://learn.microsoft.com/en-us/aspnet/core/fundamentals/localization/make-content-localizable?view=aspnetcore-7.0

----------------------------------------------------------

Exception handling and reporting

Enable error reporting via GoDaddy email
- Add code to Services namespace
- Consider moving Services namespace up one level (out of Models)

https://stackoverflow.com/questions/40614184/handling-exception-in-asp-net-core
https://stackoverflow.com/questions/56772155/asp-net-core-how-to-handle-error-pages-in-area
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-7.0
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/error-handling?view=aspnetcore-7.0&viewFallbackFrom=aspnetcore-2.2#exception-handler-lambda
https://blog.kloud.com.au/2016/03/23/aspnet-core-tips-and-tricks-global-exception-handling/